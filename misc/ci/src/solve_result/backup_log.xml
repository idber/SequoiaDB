<!-- ============================================================================
@description:  backup dialog after test
@parameter:    TEST_TYPE, from build.xml
               DEPLOY_MODE, from jenkins configure page, performance do not have this para
               testhost_list, from build.xml
               DBUILD_NUMBER, jenkins environment variable
@author:       Ting YU 2016-11-5
============================================================================= -->

<project default="main" basedir="../../">     
   <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
         <pathelement location="${basedir}/lib/ant-contrib-1.0b2.jar" />
      </classpath>
   </taskdef>
   <taskdef name="staf" classname="com.ibm.staf.ant.taskdef.STAF" >
      <classpath>
         <pathelement location="${basedir}/lib/STAFAnt.jar" />
      </classpath>
   </taskdef>
   
   <target name="main">
      <if>
         <isset property="DEPLOY_MODE"/>
         <else><!--performance tpcc do not have this parameter-->
            <var name="DEPLOY_MODE" value="" />
         </else>
      </if>
      
      <property file="${basedir}/src/conf/test.conf" />
      <property name="backup_reltdir" value="${TEST_TYPE}_${DEPLOY_MODE}_${BUILD_NUMBER}"/>
      
      <antcall target="backup_remote_log" />
      <antcall target="collect_remote_log" />
      <antcall target="backup_bin" />
      <antcall target="bacup_rg_info" />
      <antcall target="archive" />
    
   </target>
   
   <target name="backup_remote_log">
      <echo>${line.separator}****begin to backup remote log</echo>
      <property name="remote_cmd1" 
         value="ant -f ${CI_WORK_DIR}/script/src/solve_result/backup_log.xml backup_log_in_remote -DTEST_TYPE=${TEST_TYPE}" />
   
      <for list="${testhost_list}" param="testhost" parallel="true">
         <sequential>         
         <staf location="@{testhost}" service="PROCESS"
               resultPrefix="remote_exec1"
               request="START SHELL COMMAND ${remote_cmd1} WAIT STDERRTOSTDOUT RETURNSTDOUT"
               throwBuildException="1"/>
         <propertyregex property="remote_exec_rc1" input="${remote_exec1.result}" regexp="Return\ Code:\ (.*)\n" select="\1"/>
         <if>
            <equals arg1="${remote_exec_rc1}" arg2="0" />
            <else>
               <fail message="exec: ${remote_cmd1}, in host: @{testhost}, return code: ${remote_exec_rc1}"/>
            </else>
         </if>        
         </sequential>
      </for>
   </target>
   
   <target name="collect_remote_log">
      <echo>${line.separator}****begin to collect remote log</echo>
      <property name="backup_dir" location="${CI_WORK_DIR}/diaglog"/>
      <delete dir="${backup_dir}" failonerror="false"/>
      <mkdir dir="${backup_dir}"/>
      
      <property name="remote_diagdir" location="${CI_WORK_DIR}/local_diaglog"/>      
      <for list="${testhost_list}" param="testhost" parallel="false">
         <sequential>         
         <staf location="@{testhost}" service="FS"
               request="COPY FILE ${remote_diagdir}/@{testhost}_diaglog.tar.gz TODIRECTORY ${backup_dir}"
               throwBuildException="1"/>
         </sequential>
      </for>
   </target>
   
   <target name="backup_bin">
      <echo>${line.separator}****begin to backup bin/sequoiadb</echo>
      <propertyregex property="firsthost" input="${testhost_list}" regexp=",(.*)" 
                     replace="" defaultValue="${testhost_list}"/>
                     
      <mkdir dir="${CI_WORK_DIR}/${backup_reltdir}/bin"/>
      <staf location="${firsthost}" service="FS"
            request="COPY FILE ${INSTALL_DIR}/bin/sequoiadb TODIRECTORY ${CI_WORK_DIR}/${backup_reltdir}/bin"
            throwBuildException="1"/>
   </target>
   
   <target name="bacup_rg_info">
      <echo>${line.separator}****begin to backup rg info</echo>
      <propertyregex property="firsthost" input="${testhost_list}" regexp=",(.*)" 
                     replace="" defaultValue="${testhost_list}"/>
                     
      <echo file="${CI_WORK_DIR}/${backup_reltdir}/ReplicaGroup.info" 
            message="execute db.list(7):&#10;" append="false" />
      <staf location="${firsthost}" service="PROCESS"
            request="START SHELL COMMAND &quot;${INSTALL_DIR}/bin/sdb -s \&quot;db=new Sdb('localhost',${SVCNAME});db.list(7);\&quot;&quot; WAIT 1m STDERRTOSTDOUT RETURNSTDOUT"
            resultPrefix="rg"
            throwBuildException="1"/>
      <echo file="${CI_WORK_DIR}/${backup_reltdir}/ReplicaGroup.info" message="${rg.result}" append="true" />
   </target>
   
   <target name="archive">
      <echo>${line.separator}****begin to compress, then generate tar</echo>
      <property name="tar_fullname" location="${CI_WORK_DIR}/${backup_reltdir}.tar.gz"/>
      <move file="${CI_WORK_DIR}/diaglog" tofile="${CI_WORK_DIR}/${backup_reltdir}"/>
      <delete dir="${tar_fullname}" failonerror="false"/>
      <tar destfile="${tar_fullname}" longfile="gnu" compression="gzip" 
           basedir="${CI_WORK_DIR}" includes="${backup_reltdir}/**/*"/>
      <delete dir="${CI_WORK_DIR}/${backup_reltdir}"/>
      
      <echo>${line.separator}****begin to send diaglog to backup host</echo>
      <staf location="local" service="FS"
            request="COPY FILE ${tar_fullname} TODIRECTORY ${BACKLOG_DIR} TOMACHINE ${JENKINS_HOST}"
            throwBuildException="1"/>
   </target>

      
   <target name="backup_log_in_remote">
      <property file="${basedir}/src/conf/test.conf" />
      <hostinfo prefix="host" />
      <property name="backup_basedir" location="${CI_WORK_DIR}/local_diaglog"/>
      <property name="backup_reltdir" value="${host.NAME}_diaglog"/>
      <property name="backup_fullname" location="${backup_basedir}/${backup_reltdir}.tar.gz"/>
      
      <delete dir="${backup_basedir}" failonerror="false"/>
      
      <!--backup database-->
      <if>
         <equals arg1="${TEST_TYPE}" arg2="PERFORMANCETEST_TPCC" />
         <then>
            <var name="dbpath_list" value="${TPCC_DBPATH_LIST}"/>
         </then>
         <else>
            <var name="dbpath_list" value="${INSTALL_DIR}"/>
         </else>
      </if> 
      <for list="${dbpath_list}" param="dbpath" parallel="false">
         <sequential>   
            <copy todir="${backup_basedir}/${backup_reltdir}">
               <fileset dir="@{dbpath}/database" includes="*/*/diaglog/**/*log*"/>
            </copy>
         </sequential>
      </for>
      <!--backup omdata and conf/log-->
      <if>
         <equals arg1="${TEST_TYPE}" arg2="OM"/>
         <then>
            <copy todir="${backup_basedir}/${backup_reltdir}">
               <fileset dir="${INSTALL_DIR}/conf" includes="log/**/*"/>
            </copy>
            <copy todir="${backup_basedir}/${backup_reltdir}">
               <fileset dir="${INSTALL_DIR}/database" includes="sms/**/*"/>
            </copy>
         </then>
      </if>
      <!--backup sdbsadpter log-->
      <copy todir="${backup_basedir}/${backup_reltdir}">
         <fileset dir="${INSTALL_DIR}/conf/log" includes="sdbseadapterlog/**/*"/>
      </copy>
      
      <!--backup s3 log-->
      <if>
         <available file="${INSTALL_DIR}/tools/sequoias3/log" type="dir"/>
         <then>
            <mkdir dir="${backup_basedir}/${backup_reltdir}/s3log"/>
            <copy todir="${backup_basedir}/${backup_reltdir}/s3log">
               <fileset dir="${INSTALL_DIR}/tools/sequoias3/log" includes="*.log*"/>
            </copy>
         </then>
      </if>
      
      <!--backup conf-->
      <copy todir="${backup_basedir}/${backup_reltdir}">
         <fileset dir="${INSTALL_DIR}/conf" includes="local/**/*"/>
      </copy>
      <move file="${backup_basedir}/${backup_reltdir}/local" tofile="${backup_basedir}/${backup_reltdir}/conf"/>
      
      <!--backup tool log-->
      <if>
         <equals arg1="${TEST_TYPE}" arg2="PERFORMANCETEST_TPCC" />
         <else>
            <delete dir="${backup_basedir}/${backup_reltdir}/toollog" failonerror="false"/>
            <mkdir dir="${backup_basedir}/${backup_reltdir}/toollog"/>
            <copy todir="${backup_basedir}/${backup_reltdir}/toollog" >
               <fileset dir="${CI_WORK_DIR}">
                  <include name="testcase/**/*.log"/>
                  <include name="testcase/**/*.rec"/>
               </fileset>
            </copy>
         </else>
      </if> 
      
            
      <!--backup /tmp/ci_realibility-->
      <if>
         <equals arg1="${TEST_TYPE}" arg2="RELIABILITYTEST"/>
         <then>
            <delete dir="${backup_basedir}/${backup_reltdir}/reliabilitytest" failonerror="false"/>
            <mkdir dir="${backup_basedir}/${backup_reltdir}/reliabilitytest"/>
            <copy todir="${backup_basedir}/${backup_reltdir}/reliabilitytest" >
               <fileset dir="${RELIABILITY_TESTCASE_WORK_DIR}">
                  <include name="backup_*/**/*"/>
               </fileset>
            </copy>
         </then>
      </if>
      
      <!--backup core file : node core or testcase core or bin core-->
      <if>
         <equals arg1="${TEST_TYPE}" arg2="PERFORMANCETEST_TPCC" />
         <else>
            <delete dir="${backup_basedir}/${backup_reltdir}/corefile" failonerror="false"/>
            <mkdir dir="${backup_basedir}/${backup_reltdir}/corefile"/>
            <copy todir="${backup_basedir}/${backup_reltdir}/corefile" >
               <fileset dir="${CI_WORK_DIR}">
                  <include name="testcase/**/*core*"/>
                  <exclude name="testcase/**/hamcrest-core-1.3.jar"/>
               </fileset>
            </copy>
            <copy todir="${backup_basedir}/${backup_reltdir}/corefile" >
               <fileset dir="${INSTALL_DIR}">
                  <include name="database/**/*core*"/>
                  <exclude name="database/**/hamcrest-core-1.3.jar"/>
               </fileset>
            </copy>
            <copy todir="${backup_basedir}/${backup_reltdir}/corefile" >
               <fileset dir="${INSTALL_DIR}">
                  <include name="bin/**/*core*"/>
                  <exclude name="bin/**/hamcrest-core-1.3.jar"/>
               </fileset>
            </copy>
         </else>
      </if> 
      
      <!--backup sdbcmlog-->
      <if>
         <equals arg1="${TEST_TYPE}" arg2="PERFORMANCETEST_TPCC" />
         <else>
            <delete dir="${backup_basedir}/${backup_reltdir}/sdbcmlog" failonerror="false"/>
            <mkdir dir="${backup_basedir}/${backup_reltdir}/sdbcmlog"/>
            <copy todir="${backup_basedir}/${backup_reltdir}/sdbcmlog" >
               <fileset dir="${INSTALL_DIR}/conf">
                  <include name="log/**/*"/>
               </fileset>
            </copy>
         </else>
      </if> 

      
      <!--compress-->
      <tar destfile="${backup_fullname}" longfile="gnu" compression="gzip" 
           basedir="${backup_basedir}" includes="${backup_reltdir}/**/*"/>
      <delete dir="${backup_basedir}/${backup_reltdir}"/>
   </target>
    
</project>