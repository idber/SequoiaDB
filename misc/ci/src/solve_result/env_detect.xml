<project name="test" default="main_target" basedir="../../">
   <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
         <pathelement location="${basedir}/lib/ant-contrib-1.0b2.jar" />
      </classpath>
   </taskdef>
   <taskdef name="staf" classname="com.ibm.staf.ant.taskdef.STAF" >
      <classpath>
         <pathelement location="${basedir}/lib/STAFAnt.jar" />
      </classpath>
   </taskdef>

   <target name="main_target">
      <property file="${basedir}/src/conf/test.conf" />
      <property name="report_dir" value="${CI_WORK_DIR}/report/env_detect"/>
      
      <delete dir="${report_dir}" failonerror="false"/> 
      <mkdir dir="${report_dir}"/>
      <!--SYNCTEST do not detect sequoiadb start-->
      <if>
         <and>
            <not>
               <equals arg1="${TEST_TYPE}" arg2="SYNCTEST"/>
            </not>
            <not>
               <equals arg1="${TEST_TYPE}" arg2="RELIABILITYTEST"/>
            </not>
         </and>
         <then>
            <antcall target="detect_remote_env">
               <param name="detect_target_name" value="dectect_node_status"/>
               <param name="collect_remote_log_target_name" value="collect_remote_node_status_log"/>
            </antcall>
         </then>
      </if>

      <antcall target="detect_remote_env">
         <param name="detect_target_name" value="dectect_testcase_core"/>
         <param name="collect_remote_log_target_name" value="collect_remote_testcase_core_log"/>
      </antcall>
      <!-- testcase core dump report xml -->
      <antcall target="generate_testcase_core_report"/>
      <!-- node exception report xml -->
      <if>
         <and>
            <not>
               <equals arg1="${TEST_TYPE}" arg2="SYNCTEST"/>
            </not>
            <not>
               <equals arg1="${TEST_TYPE}" arg2="RELIABILITYTEST"/>
            </not>
         </and>
         <then>
            <antcall target="generate_node_start_report"/>
         </then>
      </if>
      <!-- detect node lsn and group has primary node -->
      <if>
         <not>
            <equals arg1="${TEST_TYPE}" arg2="RELIABILITYTEST"/>
         </not>
         <then>
            <antcall target="detect_db_cluster"/>
         </then>
      </if>

      <!-- cp report to ${WORKSPACE}/report-->
      <delete dir="${WORKSPACE}/report/env_detect"/>
      <copy todir="${WORKSPACE}/report/env_detect">
         <fileset dir="${report_dir}" includes="*.xml"/>
      </copy>
   </target>
   
   <target name="detect_remote_env">
      <property file="${basedir}/src/conf/test.conf" />
      <propertycopy name="testhost_list" from="${plat_form}_${TEST_TYPE}_${DEPLOY_MODE}_HOST" />

      <hostinfo prefix="host" />

      <property name="remote_cmd1" 
         value="ant -f ${CI_WORK_DIR}/script/src/solve_result/env_detect.xml ${detect_target_name}" />
         
      <property name="remote_cmd_lsof" 
         value="ant -f ${CI_WORK_DIR}/script/src/solve_result/env_detect.xml detect_handle_number -Dcontrol_host=${host.NAME}" />
   
      <for list="${testhost_list}" param="testhost" parallel="true">
         <sequential>         
            <staf location="@{testhost}" service="PROCESS"
                  resultPrefix="remote_exec1"
                  request="START SHELL COMMAND ${remote_cmd1} WAIT STDERRTOSTDOUT RETURNSTDOUT"
                  throwBuildException="1"/>
            <propertyregex property="remote_exec_rc1" input="${remote_exec1.result}" regexp="Return\ Code:\ (.*)\n" select="\1"/>
            <if>
               <equals arg1="${remote_exec_rc1}" arg2="0" />
               <else>
                  <fail message="exec: ${remote_cmd1}, in host: @{testhost}, return code: ${remote_exec_rc1}"/>
               </else>
            </if>        
            
            <staf location="@{testhost}" service="PROCESS"
                  resultPrefix="remote_exec_lsof"
                  request="START SHELL COMMAND ${remote_cmd_lsof} WAIT STDERRTOSTDOUT RETURNSTDOUT"
                  throwBuildException="1"/>
            <propertyregex property="remote_exec_lsof" input="${remote_exec_lsof.result}" regexp="Return\ Code:\ (.*)\n" select="\1"/>
            <if>
               <equals arg1="${remote_exec_lsof}" arg2="0" />
               <else>
                  <fail message="exec: ${remote_cmd_lsof}, in host: @{testhost}, return code: ${remote_exec_lsof}"/>
               </else>
            </if> 
         </sequential>
      </for>
      
      <property name="remote_cmd2" 
         value="ant -f ${CI_WORK_DIR}/script/src/solve_result/env_detect.xml ${collect_remote_log_target_name} -Dcontrol_host=${host.NAME}" />
        
      <for list="${testhost_list}" param="testhost" parallel="false">
         <sequential>
         <staf location="@{testhost}" service="PROCESS"
               resultPrefix="remote_exec2"
               request="START SHELL COMMAND ${remote_cmd2} WAIT STDERRTOSTDOUT RETURNSTDOUT"
               throwBuildException="1"/>
         <propertyregex property="remote_exec_rc2" input="${remote_exec2.result}" regexp="Return\ Code:\ (.*)\n" select="\1"/>
         <if>
            <equals arg1="${remote_exec_rc2}" arg2="0" />
            <else>
               <fail message="exec: ${remote_cmd2}, in host: @{testhost}, return code: ${remote_exec_rc2}"/>
            </else>
         </if>        
         </sequential>
      </for>      
      
   </target>
   
   <target name="dectect_node_status">
      <property file="${basedir}/src/conf/test.conf" />
      <property name="report_dir" value="${CI_WORK_DIR}/report/env_detect"/>
      <delete dir="${report_dir}"/>
      <mkdir dir="${report_dir}"/>
      <hostinfo prefix="host" />
      <!--detect node by find core-->
      <for param="nodecorname">
         <path>
            <fileset dir="${INSTALL_DIR}/database/" includes="**/*core*" />
         </path>
         <sequential>
            <echo message="${host.NAME}   ${host.ADDR4}   @{nodecorname}&#10;" file="${report_dir}/${host.NAME}_node_core.log" append="true"/>
         </sequential>
      </for>
      <!--detect node core from  bin -->
      <for param="nodecorname">
         <path>
            <fileset dir="${INSTALL_DIR}/bin/" includes="**/*core*" />
         </path>
         <sequential>
            <echo message="${host.NAME}   ${host.ADDR4}   @{nodecorname}&#10;" file="${report_dir}/${host.NAME}_node_core.log" append="true"/>
         </sequential>
      </for>
      
      <!--detect node count node start-->
      <for param="dirname">
         <dirset dir="${INSTALL_DIR}/database/">
            <include name="**/diaglog"/>
         </dirset>
         <sequential>
            <fileset id="existing" dir="@{dirname}">
               <patternset id="files">
                  <include name="**/sdbdiag.log*"/>
               </patternset>
            </fileset>
            <fileset id="matches" dir="@{dirname}">
               <patternset refid="files"/>
               <contains text="Start sequoiadb"/>
            </fileset>
            <echo message="${host.NAME}   ${host.ADDR4}   @{dirname}   " file="${report_dir}/${host.NAME}_node_start.log" append="true"/>
           
            <countstr str="Start sequoiadb" resultproperty="str_count">
                <path-elements>
                  <fileset refid="matches"/>
                </path-elements>
            </countstr>
            <countstr str="restart by tool" resultproperty="start_cnt_by_tool">
               <path-elements>
                  <fileset dir="@{dirname}" includes=".RESTART_BY_CHANGECONF"/>
               </path-elements>
            </countstr>
            <math result="expect_cnt" operand1="${start_cnt_by_tool}" operation="+" operand2="2" datatype="int"/>
            <if>
               <isgreaterthan arg1="${str_count}" arg2="${expect_cnt}"/>
               <then>
                  <echo message="${str_count} times, node start exception" file="${report_dir}/${host.NAME}_node_start.log" append="true"/>
               </then>
               <else>
                  <echo message="${str_count} " file="${report_dir}/${host.NAME}_node_start.log" append="true"/>
               </else>
            </if>
            <echo message="&#10;" file="${report_dir}/${host.NAME}_node_start.log" append="true"/>
            <var name="str_count" unset="true"/>
         </sequential>
      </for>
   </target>
   
   <macrodef name="countstr">
      <attribute name="resultproperty"/>
      <attribute name="str"/>
      <element name="path-elements"/>
      <sequential>
         <var name="@{resultproperty}" unset="true"/>
         <resourcecount property="@{resultproperty}">
         <tokens>
            <concat>
               <filterchain>
                  <tokenfilter>
                     <containsstring contains="@{str}"/>
                  </tokenfilter>
               </filterchain>
               <path-elements/>
            </concat>
         </tokens>
         </resourcecount>
      </sequential>
   </macrodef>
 
   <target name="collect_remote_node_status_log">
      <property file="${basedir}/src/conf/test.conf" />
      <property name="report_dir" value="${CI_WORK_DIR}/report/env_detect"/>
      <hostinfo prefix="host" />
      <property name="backup_dir" location="${report_dir}"/>
      <property name="backup_fullname" location="${report_dir}/${host.NAME}_node_start.log"/>
      <property name="backup_fullname2" location="${report_dir}/${host.NAME}_node_core.log"/>
      <if>
         <equals arg1="${control_host}" arg2="${host.NAME}" />
         <else>
            <if>
               <available file="${backup_fullname}" type="file"/>
               <then>
                  <staf location="local" service="FS"
                        request="COPY FILE ${backup_fullname} TODIRECTORY ${backup_dir} TOMACHINE ${control_host}"
                        throwBuildException="1"/>
               </then>
            </if>
            <if>
               <available file="${backup_fullname2}" type="file"/>
               <then>
                  <staf location="local" service="FS"
                        request="COPY FILE ${backup_fullname2} TODIRECTORY ${backup_dir} TOMACHINE ${control_host}"
                        throwBuildException="1"/>
               </then>
            </if>
         </else>
      </if>
   </target>
   
   <target name="collect_remote_testcase_core_log">
      <property file="${basedir}/src/conf/test.conf" />
      <property name="report_dir" value="${CI_WORK_DIR}/report/env_detect"/>
      <hostinfo prefix="host" />
      <property name="backup_dir" location="${report_dir}"/>
      <property name="backup_fullname" location="${report_dir}/${host.NAME}_testcase_core.log"/>
      <if>
         <equals arg1="${control_host}" arg2="${host.NAME}" />
         <else>
            <staf location="local" service="FS"
                  request="COPY FILE ${backup_fullname} TODIRECTORY ${backup_dir} TOMACHINE ${control_host}"
                  throwBuildException="1"/>
         </else>
      </if>
   </target>

   <target name="generate_node_start_report">
      <property file="${basedir}/src/conf/test.conf" />
      <property name="report_dir" value="${CI_WORK_DIR}/report/env_detect"/>
      <property name="exception_flag" value="false"/>
      <!--count core-->
      <countstr str="core" resultproperty="str_count">
         <path-elements>
            <fileset dir="${report_dir}/" includes="*node_core*.log"/>
         </path-elements>
      </countstr>
      <var name="node_core_msg" value=""/>
      <if>
        <equals arg1="${str_count}" arg2="0"/>
        <else>
           <var name="exception_flag" value="true"/>
           <var name="node_core_msg" value="core dump total : ${str_count}&#10;"/>
        </else>
      </if>
      <var name="str_count" unset="true"/>
      
      <!--judge node start log contains node start exception-->
      <countstr str="node start exception" resultproperty="str_count">
         <path-elements>
            <fileset dir="${report_dir}/" includes="*node_start*.log"/>
         </path-elements>
      </countstr>
      
      <if>
        <equals arg1="${str_count}" arg2="0"/>
        <then>
           <var name="node_start_error_msg" value=""/>
        </then>
        <else>
           <var name="exception_flag" value="true"/>
           <var name="node_start_error_msg" value="node start detail:&#10;"/>
        </else>
      </if>

      <if>
         <equals arg1="${exception_flag}" arg2="true"/>
         <then>
            <copy file="${basedir}/src/test/exec_testcase/report_fail_temple.xml" tofile="${report_dir}/node_exception_report.xml"/>
         </then>
         <else>
            <copy file="${basedir}/src/test/exec_testcase/report_succ_temple.xml" tofile="${report_dir}/node_exception_report.xml"/>
         </else>
      </if>
      
      <for param="tmpcorename">
         <path>
            <fileset dir="${report_dir}/" includes="*node_core*.log"/>
         </path>
         <sequential>
            <loadfile property="tmpcorfile" srcFile="@{tmpcorename}"/>
            <if>
               <isset property="tmpcorfile"/>
               <then>
                  <var name="node_core_msg" value="${node_core_msg}$${tmpcorfile}"/>
                  <var name="tmpcorfile" unset="true"/>
               </then>
            </if>
         </sequential>
      </for>
      <for param="tmpnodestart">
         <path>
            <fileset dir="${report_dir}/" includes="*node_start*.log"/>
         </path>
         <sequential>
            <loadfile property="tmpnodefile" srcFile="@{tmpnodestart}"/>
            <if>
               <isset property="tmpnodefile"/>
               <then>
                  <var name="node_start_error_msg" value="${node_start_error_msg}$${tmpnodefile}"/>
                  <var name="tmpnodefile" unset="true"/>
               </then>
            </if>
         </sequential>
      </for>
      <var name="err_msg" value="${node_core_msg}&#10;$${node_start_error_msg}"/>
      <replace file="${report_dir}/node_exception_report.xml" token="ERROR_MESSAGE" value="${err_msg}"/>
      <replace file="${report_dir}/node_exception_report.xml" token="TESTCASE_TYPE" value="detect_env"/>
      <replace file="${report_dir}/node_exception_report.xml" token="TESTSUIT_NAME" value="detect_node"/>
      <replace file="${report_dir}/node_exception_report.xml" token="TESTCASE_NAME" value="node_exception"/>
      <var name="str_count" unset="true"/>
      
   </target>
   
   <target name="generate_testcase_core_report">
      <property file="${basedir}/src/conf/test.conf" />
      <property name="report_dir" value="${CI_WORK_DIR}/report/env_detect"/>
      <countstr str="core" resultproperty="str_count">
         <path-elements>
            <fileset dir="${report_dir}/" includes="*testcase_core*.log"/>
         </path-elements>
      </countstr>
      
      <if>
         <equals arg1="${str_count}" arg2="0"/>
         <then>
            <copy file="${basedir}/src/test/exec_testcase/report_succ_temple.xml" tofile="${report_dir}/testcase_core_dump_report.xml"/>
         </then>
         <else>
            <copy file="${basedir}/src/test/exec_testcase/report_fail_temple.xml" tofile="${report_dir}/testcase_core_dump_report.xml"/>
            <var name="error_msg" value="core dump total : ${str_count}&#10;"/>
            <for param="corelogname">
               <path>
                  <fileset dir="${report_dir}/" includes="*testcase_core*.log"/>
               </path>
               <sequential>
                  <loadfile property="msg" srcFile="@{corelogname}"/>
                  <if>
                     <isset property="msg"/>
                     <then>
                        <var name="error_msg" value="${error_msg}$${msg}"/>
                        <var name="msg" unset="true"/>
                     </then>
                  </if>
               </sequential>
            </for>
            <replace file="${report_dir}/testcase_core_dump_report.xml" token='ERROR_MESSAGE' value='${error_msg}'/>
         </else>
      </if>
      <replace file="${report_dir}/testcase_core_dump_report.xml" token='TESTCASE_TYPE' value='detect_env'/>
      <replace file="${report_dir}/testcase_core_dump_report.xml" token='TESTSUIT_NAME' value='detect_testcase_core'/>
      <replace file="${report_dir}/testcase_core_dump_report.xml" token='TESTCASE_NAME' value='testcase_core_exception'/>
      <var name="str_count" unset="true"/>
   </target>
   
   <target name="dectect_testcase_core">
      <property file="${basedir}/src/conf/test.conf" />
      <property name="report_dir" value="${CI_WORK_DIR}/report/env_detect"/>
      <available property="isExist" file="${report_dir}" type="dir"/>
      <if>
         <equals arg1="${isExist}" arg2="true"/>
         <else>
            <mkdir dir="${report_dir}"/>
         </else>
      </if>
      <hostinfo prefix="host" />
      <resourcecount property="corefilenum">
         <fileset dir="${CI_WORK_DIR}" includes="testcase/**/*core*" excludes="testcase/user\ scenario/*"/>
      </resourcecount>
      <touch file="${report_dir}/${host.NAME}_testcase_core.log"/>
      <if>
         <equals arg1="${corefilenum}" arg2="0"/>
         <else>
            <for param="corfilename">
               <fileset dir="${CI_WORK_DIR}/testcase/" includes="**/*core*" excludes="**/*core*.jar,user\ scenario/*"/>
               <sequential>
                  <echo message="${host.NAME}   ${host.ADDR4}   @{corfilename} &#10;" file="${report_dir}/${host.NAME}_testcase_core.log" append="true"/>
               </sequential>
            </for>
         </else>
      </if> 
   </target>

   <target name="detect_handle_number">
      <property file="${basedir}/src/conf/test.conf" />
      <property name="report_dir" value="${CI_WORK_DIR}/report/env_detect"/>
      <hostinfo prefix="host" />
      <var name="output" unset="true"/>
      <exec executable="sh" 
            outputproperty="output" 
            failonerror="false">
         <arg value="-c"/>
         <arg value="${INSTALL_DIR}/bin/sdblist -l |awk '{print $4}' | tail -n +2 | head -n -1 " />
      </exec>
      <var name="flag" value="false"/>
      <var name="lsofinfo" value="hostname       pid    lsof_num"/>
      <for list="${output}" param="itempid" delimiter="${line.separator}">
         <sequential>
            <var name="openfilenum" unset="true"/>
            <exec executable="sh" 
                  outputproperty="openfilenum" 
                  failonerror="false">
               <arg value="-c"/>
               <arg value="lsof -p @{itempid} | wc -l | tail -n 2 | head -n 1 " />
            </exec>
            <var name="re" unset="true"/>
            <var name="testresult" unset="true"/>
            <exec executable="sh" 
                  outputproperty="re" 
                  resultproperty="testresult"
                  failonerror="false">
               <arg value="-c"/>
               <arg value="test ${openfilenum} -le 200" />
            </exec>
            <var name="lsofinfo" value="${lsofinfo}&#10;${host.NAME}  @{itempid}   ${openfilenum}"/>
            <if>
               <equals arg1="${testresult}" arg2="1"/>
               <then>
                  <var name="flag" value="true"/>
               </then>
            </if>
         </sequential>
      </for>
      <if>
         <equals arg1="${flag}" arg2="true"/>
         <then>
            <copy file="${basedir}/src/test/exec_testcase/report_fail_temple.xml" tofile="${report_dir}/${host.NAME}_node_lsof_report.xml"/>
            <replace file="${report_dir}/${host.NAME}_node_lsof_report.xml" token="ERROR_MESSAGE" value="${lsofinfo}"/>
            <replace file="${report_dir}/${host.NAME}_node_lsof_report.xml" token="TESTCASE_TYPE" value="detect_env"/>
            <replace file="${report_dir}/${host.NAME}_node_lsof_report.xml" token="TESTSUIT_NAME" value="detect_node"/>
            <replace file="${report_dir}/${host.NAME}_node_lsof_report.xml" token="TESTCASE_NAME" value="node_lsof"/>
            <staf location="local" service="FS"
                  request="COPY FILE ${report_dir}/${host.NAME}_node_lsof_report.xml TODIRECTORY ${CI_WORK_DIR}/report/env_detect TOMACHINE ${control_host}"
                  throwBuildException="1"/>
         </then>
      </if>
   </target>
   
   
   <target name="detect_db_cluster">
      <detectenv envisok="envrc" casetype="detect_env" casename="db_group"
                    rptfullname="${report_dir}/after_detect_env_db_group.xml" />
   </target>
   <macrodef name="detectenv">
      <attribute name="envisok" />
      <attribute name="rptfullname"/>
      <attribute name="casetype"/>
      <attribute name="casename"/>
      <sequential>
      <property file="${basedir}/src/conf/test.conf" /> 
      <propertyregex property="firsthost" input="${testhost_list}" regexp=",(.*)" replace="" defaultValue="${testhost_list}"/>
      <var name="sdbshell" value="${INSTALL_DIR}/bin/sdb"/>
      <var name="cmd1" value="-f &quot;${basedir}/src/solve_result/detect_db_datagroup.js&quot;" />
      <var name="cmd2" value="-e &quot;var COORDSVCNAME='${SVCNAME}';var COORDHOSTNAME='localhost'&quot;" />
      <echo message="exec cmd: ${sdbshell} ${cmd1} ${cmd2}"/>
      <var name="output" unset="true"/>
      <var name="@{envisok}" unset="true"/>
      <exec executable="${sdbshell}" 
            timeout="1800000" 
            outputproperty="output" 
            resultproperty="@{envisok}"
            failonerror="false">
         <arg line="${cmd1} ${cmd2}" />
      </exec>
      <echo message="${output}"/>
      <if>
         <not>
            <equals arg1="${@{envisok}}" arg2="0"/>
         </not>
         <then>
            <copy file="${basedir}/src/test/exec_testcase/report_fail_temple.xml" tofile="@{rptfullname}"/>
            <replace file="@{rptfullname}" token="ERROR_MESSAGE" value="${output}"/>
            <replace file="@{rptfullname}" token="TESTSUIT_NAME" value="detect_env"/>
            <replace file="@{rptfullname}" token="TESTCASE_TYPE" value="@{casetype}"/>
            <propertyregex property="casename" input="@{casename}" defaultValue="@{casename}"
                           regexp="\." replace="_" override="true"/> 
            <replace file="@{rptfullname}" token="TESTCASE_NAME" value="final_${casename}"/>
         </then>
      </if>
      </sequential>
   </macrodef>
</project>
