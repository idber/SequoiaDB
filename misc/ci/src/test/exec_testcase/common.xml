<project basedir="../../../">     
   <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
         <pathelement location="${basedir}/lib/ant-contrib-1.0b2.jar" />
      </classpath>
   </taskdef>
   
   <macrodef name="prefix">
      <attribute name="resultproperty"/>
      <sequential>
         <hostinfo prefix="host" />
         <var name="testtype" value="Test_"/>
         <var name="hostname" unset="true"/>
         <propertyregex property="hostname" input="${host.NAME}" regexp="[^a-zA-Z0-9]" replace=""/>
         <var name="endflag" value="_end"/>
         <var name="@{resultproperty}" unset="true"/>
         <var name="@{resultproperty}" value="${testtype}${hostname}${endflag}"/>
      </sequential>
   </macrodef>
   
   <macrodef name="markinlog">
      <attribute name="casename"/>
      <attribute name="marktype"/>
      <sequential>
         <property file="${basedir}/src/conf/test.conf" /> 
         <var name="cmd_file_name" unset="true"/>
         <propertyregex property="cmd_file_name" input="@{casename}" regexp="(.*)\.(.*)" select="\1"/>
         <if>
            <isset property="cmd_file_name"/>
            <else>
               <var name="cmd_file_name" value="@{casename}"/>
            </else>
         </if>
         <delete file="${cmd_file_name}_begin.js" failonerror="false"/>
         <delete file="${cmd_file_name}_end.js" failonerror="false"/>
         <touch file="${cmd_file_name}_begin.js"/>
         <touch file="${cmd_file_name}_end.js"/>
         <echo message="print()" file="${cmd_file_name}_begin.js"/>
         <echo message="print()" file="${cmd_file_name}end.js"/>
         <switch value="@{marktype}">
            <case value="begin">
               <var name="mark_cmd" value="-e &quot;db=new Sdb('localhost',${SVCNAME}); db.msg('Begin testcase[@{casename}]'); 
               db.close();&quot; -f ${cmd_file_name}_begin.js" />
            </case>
            <case value="end">
               <var name="mark_cmd" value="-e &quot;db=new Sdb('localhost',${SVCNAME}); db.msg('End testcase[@{casename}]'); 
               db.close();&quot; -f ${cmd_file_name}_end.js" />
            </case>
         </switch>
         <echo message="exec cmd: ${INSTALL_DIR}/bin/sdb ${mark_cmd}"/>
         
         <var name="mark_output" unset="true"/>
         <var name="mark_rc" unset="true"/>
         <exec executable="${INSTALL_DIR}/bin/sdb" 
               timeout="20000" 
               outputproperty="mark_output" 
               resultproperty="mark_rc"
               failonerror="false">
            <arg line="${mark_cmd}" />
         </exec>
         <echo message="${mark_output}" />
      </sequential>
   </macrodef>   
   
   <macrodef name="detectenv">
      <attribute name="envisok" />
      <attribute name="rptfullname"/>
      <attribute name="casetype"/>
      <attribute name="casename"/>
      <sequential>
      <if>
         <equals arg1="${TEST_TYPE}" arg2="SYNCTEST"/>
         <then>
            <property file="${basedir}/src/conf/test.conf" /> 
            <var name="sdbshell" value="${INSTALL_DIR}/bin/sdb"/>
            <var name="cmd1" value="-f &quot;${basedir}/src/test/exec_testcase/lib/func.js,${basedir}/src/test/exec_testcase/lib/detect_cluster.js&quot;" />
            <var name="cmd2" value="-e &quot;var COORDSVCNAME='${SVCNAME}';var COORDHOSTNAME='localhost'&quot;" />
            <echo message="exec cmd: ${sdbshell} ${cmd1} ${cmd2}"/>
            <var name="output" unset="true"/>
            <var name="@{envisok}" unset="true"/>
            <exec executable="${sdbshell}" 
                  timeout="1800000" 
                  outputproperty="output" 
                  resultproperty="@{envisok}"
                  failonerror="false">
               <arg line="${cmd1} ${cmd2}" />
            </exec>
            <echo message="${output}"/>
         </then>
         <else>
            <var name="@{envisok}" value="0"/>
         </else>
      </if>
      
      <if>
         <and>
            <equals arg1="${BREAK_ON_FAILURE}" arg2="true"/>
            <not>
               <equals arg1="${@{envisok}}" arg2="0"/>
            </not>
         </and>
         <then>
            <copy file="${basedir}/src/test/exec_testcase/report_fail_temple.xml" tofile="@{rptfullname}"/>
            <replace file="@{rptfullname}" token="ERROR_MESSAGE" value="${output}"/>
            <replace file="@{rptfullname}" token="TESTSUIT_NAME" value="detect_env"/>
            <replace file="@{rptfullname}" token="TESTCASE_TYPE" value="@{casetype}"/>
            <propertyregex property="casename" input="@{casename}" defaultValue="@{casename}"
                           regexp="\." replace="_" override="true"/> 
            <replace file="@{rptfullname}" token="TESTCASE_NAME" value="before_${casename}"/>
         </then>
      </if>
      </sequential>
   </macrodef>
   
   <macrodef name="changeconf">
      <attribute name="mode" />
      <attribute name="conffullname" />
      <attribute name="rptfullname" />
      <attribute name="casetype" />
      <attribute name="rc"/>
      <sequential>
      
      <if><!--execute-->
         <equals arg1="${TEST_TYPE}" arg2="CONFIGURETEST" />
         <then>
            <!--get node.conf dir-->
            <var name="exec_dir" unset="true"/>
            <dirname property="exec_dir" file="@{conffullname}" /> 
            
            <!--execute conf tool-->
            <var name="cmd1" value="-f &quot;@{conffullname},${CI_WORK_DIR}/testcase/tools/changeConf.js&quot;" />
            <var name="cmd2" value="-e &quot;var hostname='localhost';var svcname=${SVCNAME};var mode='@{mode}'&quot;" />
            <var name="output" unset="true"/>
            <var name="@{rc}" unset="true"/>
            <echo message="exec cmd: ${INSTALL_DIR}/bin/sdb ${cmd1} ${cmd2}, in dir: ${exec_dir}"/>
            <exec executable="${INSTALL_DIR}/bin/sdb" 
                  dir="${exec_dir}"
                  timeout="600000" 
                  outputproperty="output" 
                  resultproperty="@{rc}"
                  failonerror="false">
               <arg line="${cmd1} ${cmd2}" />
            </exec>
            <echo message="${output}" />
            <echo/>
         </then>
         <else>
            <var name="@{rc}" value="0"/>
            <var name="output" value=""/>
         </else>
      </if>
      
      <if><!--generate report-->
         <equals arg1="${@{rc}}" arg2="0" />
         <else>
            <var name="suitname" unset="true"/>
            <basename property="suitname" file="${exec_dir}" />
            
            <copy file="${basedir}/src/test/exec_testcase/report_fail_temple.xml" tofile="@{rptfullname}"/>
            <replace file="@{rptfullname}" token='TESTCASE_TYPE' value='detect_env'/>
            <replace file="@{rptfullname}" token='TESTSUIT_NAME' value='@{casetype}'/>
            <replace file="@{rptfullname}" token='TESTCASE_NAME' value='change_conf_@{mode}_${suitname}'/>
            <hostinfo prefix="host" />
            <var name="ms1" value="EXECUTE HOST: ${host.NAME} ${host.ADDR4}&#10;&#10;"/>
            <var name="ms2" value="EXECUTE CMD:&#10;${INSTALL_DIR}/bin/sdb ${cmd1} ${cmd2}&#10;"/>
            <var name="ms3" value="RETURN CODE: ${@{rc}}&#10;"/>
            <var name="ms4" value="OUTPUT MESSAGE:&#10;${output}&#10;"/>
            <replace file="@{rptfullname}" token="ERROR_MESSAGE" value="${ms1}${ms2}${ms3}${ms4}"/>
         </else>
      </if>
      
      <if><!--clean-->
         <equals arg1="@{mode}" arg2="after" />
         <then>
            <delete file="@{conffullname}"/>  
         </then>
      </if> 
      
      </sequential>
   </macrodef>
</project>