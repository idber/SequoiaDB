<!-- ============================================================================
@description:  exec c or cpp testcase
@parameter:    TEST_TYPE              eg: CONFIGURETEST
               testcase_type          eg: tdd_c
               testcase_dir           eg: /tmp/ci/testcase/tdd/c
               report_dir             egï¼š/tmp/ci/report/tdd_c
@author:       Ting YU 2016-11-1
============================================================================= -->

<project default="exec_c_testcase" basedir="../../../">     
   <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
         <pathelement location="${basedir}/lib/ant-contrib-1.0b2.jar" />
      </classpath>
   </taskdef>
   <import file="${basedir}/src/test/exec_testcase/common.xml" />
   
   <target name="exec_c_testcase">
      <property file="${basedir}/src/conf/test.conf" />
      <property name="sdbshell_fullname" value="${INSTALL_DIR}/bin/sdb" /> 
      <if>
         <isset property="BREAK_ON_FAILURE"/>
         <else>
            <var name="BREAK_ON_FAILURE" value="false"/>
         </else>
      </if>
      
      <mkdir dir="${report_dir}"/>
      <chmod dir="${testcase_dir}" perm="u+x" includes="*" />

      <var name="processrc" value="0"/>
      <for param="casefullname">
         <path>
            <fileset dir="${testcase_dir}" includes="*" excludes="*.node.conf,node.conf.ini"/>
         </path>
         <sequential>  
         
            <var name="is_continue_exec" unset="true"/>
            <condition property="is_continue_exec" value="true" else="false">
               <or>
                  <equals arg1="${BREAK_ON_FAILURE}" arg2="false"/>
                  <and>
                     <equals arg1="${BREAK_ON_FAILURE}" arg2="true"/>
                     <equals arg1="${processrc}" arg2="0"/>
                  </and>
               </or>
            </condition>
            
            <if>
               <equals arg1="${is_continue_exec}" arg2="true"/>
               <then>
                  <processonecase reportdir="${report_dir}" 
                                  pcsrc="processrc" 
                                  casefullname="@{casefullname}"/>
               </then>
            </if>

         </sequential>
      </for>
      
      <if>
         <equals arg1="${is_continue_exec}" arg2="false"/>
         <then>
            <touch file="${report_dir}/.TESTCASE_FAIL"/>
         </then>
      </if>
      
   </target>
   
   <macrodef name="processonecase">
      <attribute name="pcsrc"/>
      <attribute name="reportdir"/>
      <attribute name="casefullname" />   
      <sequential>
         <var name="testcase_name" unset="true" />
         <basename property="testcase_name" file="@{casefullname}"/> 
         <var name="case_dir" unset="true" />
         <dirname property="case_dir" file="@{casefullname}"/>
            
         <detectenv envisok="envrc" casetype="${testcase_type}" casename="${testcase_name}"
                    rptfullname="@{reportdir}/before_${testcase_type}_${testcase_name}.xml" />
         
         <if>
            <and>
               <equals arg1="${BREAK_ON_FAILURE}" arg2="true"/>
               <not>
                  <equals arg1="${envrc}" arg2="0"/>
               </not>
            </and>
            <else>
               
               <changeconf mode="before" conffullname="@{casefullname}.node.conf" 
                           rc="conf_rc1" casetype="${testcase_type}" 
                           rptfullname="@{reportdir}/configure_before_${testcase_name}.xml" />

               <if>
                  <equals arg1="${conf_rc1}" arg2="0" />
                  <then>
                     <runonecase  casefullname="@{casefullname}" casename="${testcase_name}"
                                  casetype="${testcase_type}" reportdir="@{reportdir}"
                                  rc="caserc"/>
                  </then>
               </if>

               <changeconf mode="after" conffullname="${case_dir}/node.conf.ini" 
                           rc="conf_rc2" casetype="${testcase_type}" 
                           rptfullname="@{reportdir}/configure_after_${testcase_name}.xml"/>

            </else>
         </if>
         
         <var name="@{pcsrc}" unset="true"/>
         <condition property="@{pcsrc}" value="0" else="1">
            <and>
               <equals arg1="${envrc}" arg2="0"/>
               <equals arg1="${caserc}" arg2="0"/>
            </and>
         </condition>
      </sequential>
   </macrodef>
   
   <macrodef name="runonecase">
      <attribute name="casefullname"/>
      <attribute name="casename" /> 
      <attribute name="casetype" />
      <attribute name="reportdir" />
      <attribute name="rc"/>
      <sequential>
         <var name="begin_time" unset="true"/>
         <tstamp>
            <format property="begin_time" pattern="yyyy-MM-dd_HH:mm:ss" />
         </tstamp>
         
         <markinlog casename="@{casefullname}" marktype="begin"/>
         
         <hostinfo prefix="host" />
         <var name="report_fullname" value="@{reportdir}/@{casename}_${host.NAME}.xml"/>
         <var name="cmd" value="--gtest_filter=* --gtest_output=xml:${report_fullname}"/>   
         <echo message="${line.separator}exec cmd: @{casefullname} ${cmd}"/>
         
         <!--run testcase-->
         <var name="testcase_dir" unset="true"/>
         <dirname property="testcase_dir" file="@{casefullname}" />         
         <var name="screen_output" unset="true"/>
         <var name="@{rc}" unset="true"/>
         <exec executable="@{casefullname}" 
               dir="${testcase_dir}" 
               timeout="1200000" 
               outputproperty="screen_output" 
               resultproperty="@{rc}" 
               failonerror="false" >
            <arg line="${cmd}"/>
            <env key="LD_LIBRARY_PATH" path="${LD_LIBRARY_PATH}:${INSTALL_DIR}/lib" />
         </exec>
         <echo message="${screen_output}" />
         
         <markinlog casename="@{casefullname}" marktype="end"/>
         
         <var name="end_time" unset="true"/>
         <tstamp>
            <format property="end_time" pattern="yyyy-MM-dd_HH:mm:ss" />
         </tstamp>
         <echo message="begin at ${begin_time}, end at ${end_time}" />
         
         <propertycopy name="testhost_list" from="${plat_form}_${TEST_TYPE}_${DEPLOY_MODE}_HOST" />
         <var name="cluster_host_info" value=""/>
         <for list="${testhost_list}" param="testhost">
            <sequential>
               <hostinfo prefix="prefix@{testhost}" host="@{testhost}"/>
               <var name="cluster_host_info" value="${cluster_host_info} @{testhost}/${prefix@{testhost}.ADDR4}"/>
            </sequential>
         </for>
         
         <!--modify report-->
         <hostinfo prefix="host" />
         <var name="backup_reltdir" value="${TEST_TYPE}_${DEPLOY_MODE}_${BUILD_NUMBER}.tar.gz"/>
         <var name="download_url" value="&#10;DOWNLOAD DIAGLOG :&#10;http://192.168.30.185:8081/${backup_reltdir}&#10;" />
         <var name="ms1" value="EXECUTE HOST: ${host.NAME}/${host.ADDR4}&#10;&#10;"/>  
         <var name="ms2" value="CLUSTER HOST:${cluster_host_info}&#10;&#10;"/>         
         <replaceregexp file="${report_fullname}" 
                        match='&lt;failure(.*)&gt;' 
                        replace='&lt;failure\1&gt;&#10;${ms1}${ms2}' 
                        flags="g" 
                        byline="true" 
                        encoding="utf-8"/>
         <replaceregexp file="${report_fullname}" 
                        match='&lt;\/failure&gt;' 
                        replace='${download_url}&lt;\/failure&gt;' 
                        flags="g" 
                        byline="true" 
                        encoding="utf-8"/>
                        
         <propertyregex property="casename" input="@{casename}" defaultValue="@{casename}"
                        regexp="\." replace="_" override="true"/>
         <replaceregexp file="${report_fullname}"
                        match='classname="(.*)"' 
                        replace='classname="@{casetype}.${casename}"' 
                        flags="g" 
                        byline="true" 
                        encoding="utf-8"/>
      </sequential>
   </macrodef>


   
</project>