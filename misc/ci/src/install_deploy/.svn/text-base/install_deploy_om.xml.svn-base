<!-- ============================================================================
@description:  install and deploy sequoiadb
@parameter:    TEST_TYPE: from build.xml
               testhost_list: from build.xml
@author:       CSQ 2018-07-04
============================================================================= -->

<project default="main" basedir="../../">  
   <property file="${basedir}/src/conf/test.conf" /> 
   <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
         <pathelement location="${basedir}/lib/ant-contrib-1.0b2.jar" />
      </classpath>
   </taskdef>
   <taskdef name="staf" classname="com.ibm.staf.ant.taskdef.STAF" >
      <classpath>
         <pathelement location="${basedir}/lib/STAFAnt.jar" />
      </classpath>
   </taskdef>    
   
   <target name="main"> 
      <propertyregex property="firsthost" input="${testhost_list}" regexp=",(.*)" replace="" defaultValue="${testhost_list}"/>   
      <antcall target="uninstall"/>
      <antcallback target="ready_db_package" return="package_name"/><!--variable package_name used in target install--> 
      <antcall target="install"/>
      <antcall target="change_limits"/>
      <antcall target="ready_pg_package"/> 
      <antcall target="ready_mysql_package"/> 
   </target>
   
   <target name="uninstall" depends="">    
      <for list="${testhost_list}" param="testhost" parallel="true">
         <sequential>           
            <staf location="@{testhost}" service="PROCESS"
                  request="START SHELL COMMAND ${INSTALL_DIR}/uninstall --mode unattended WAIT 10m RETURNSTDOUT RETURNSTDERR"
                  throwBuildException="1"/>
            <staf location="@{testhost}" service="FS"
                  request="DELETE ENTRY ${INSTALL_DIR} RECURSE CONFIRM"
                  throwBuildException=""/>
            <staf location="@{testhost}" service="PROCESS"
                  request="START SHELL COMMAND ${INSTALL_PG_DIR}/uninstall --mode unattended WAIT 10m RETURNSTDOUT RETURNSTDERR"
                  throwBuildException="1"/>
            <staf location="@{testhost}" service="FS"
                  request="DELETE ENTRY ${INSTALL_PG_DIR} RECURSE CONFIRM"
                  throwBuildException=""/>
            <staf location="@{testhost}" service="PROCESS"
                  request="START SHELL COMMAND ${INSTALL_MySQL_DIR}/uninstall --mode unattended WAIT 10m RETURNSTDOUT RETURNSTDERR"
                  throwBuildException="1"/>
            <staf location="@{testhost}" service="FS"
                  request="DELETE ENTRY ${INSTALL_MySQL_DIR} RECURSE CONFIRM"
                  throwBuildException=""/>
            <if>
               <equals arg1="${TEST_TYPE}" arg2="PERFORMANCETEST_TPCC" />
               <then>
                  <for list="${TPCC_DBPATH_LIST}" param="dbpath" parallel="false">
                     <sequential>
                        <staf location="@{testhost}" service="FS"
                              request="DELETE ENTRY @{dbpath} RECURSE CONFIRM"
                              throwBuildException=""/>
                     </sequential>
                  </for>
               </then>
               <elseif>
                  <equals arg1="${TEST_TYPE}" arg2="RELIABILITYTEST"/>
                  <then>
                     <for list="${RELIABILITYTEST_DBPATH_LIST}" param="dbpath" parallel="false">
                        <sequential>
                           <staf location="@{testhost}" service="FS"
                                 request="DELETE ENTRY @{dbpath} RECURSE CONFIRM"
                                 throwBuildException=""/>
                        </sequential>
                     </for>
                  </then>
               </elseif>
            </if>
         </sequential>
      </for>
   </target>
   
   <target name="ready_db_package" depends="">
      <!--get run package name-->
      <property name="package_dir" location="${WORKSPACE}/archive/current" />
      <first id="package_fullname">
         <fileset dir="${package_dir}" includes="sequoiadb*.run" />
      </first>
      <property name="package_fullname" location="${toString:package_fullname}" />
      <basename property="package_name_part" file="${package_fullname}" suffix=".run"/>
      <property name="package_name" value="${package_name_part}.run" />     
      
      <!--copy run package to remote host-->
      <for list="${testhost_list}" param="testhost" parallel="false">
         <sequential>
            <staf location="@{testhost}" service="FS"
                  request="CREATE DIRECTORY ${CI_WORK_DIR}"
                  throwBuildException="1"/>
            <staf location="local" service="FS"
                  request="COPY FILE ${package_fullname} TODIRECTORY ${CI_WORK_DIR} TOMACHINE @{testhost}"
                  throwBuildException="1"/>
            <staf location="@{testhost}" service="PROCESS"
                  request="START SHELL COMMAND chmod +x ${CI_WORK_DIR}/${package_name} WAIT 1m"
                  throwBuildException="1"/>     
         </sequential>
      </for>
   </target>
   
   <target name="ready_pg_package" depends="">
      <var name="package_name" unset="true"/>
      <var name="package_fullname" unset="true"/>
      <!--get run package name-->
      <property name="package_dir" location="${WORKSPACE}/archive/current" />
      <first id="package_fullname">
         <fileset dir="${package_dir}" includes="sequoiasql-postgresql*.run" />
      </first>
      <property name="package_fullname" location="${toString:package_fullname}" />
      <basename property="package_name_part" file="${package_fullname}" suffix=".run"/>
      <var name="package_name" unset="true"/>
      <property name="package_name" value="${package_name_part}.run" />     
      
      <!--copy run package to remote host-->
      <for list="${firsthost}" param="testhost" parallel="false">
         <sequential>
            <staf location="@{testhost}" service="FS"
                  request="CREATE DIRECTORY ${CI_WORK_DIR}"
                  throwBuildException="1"/>
            <staf location="local" service="FS"
                  request="COPY FILE ${package_fullname} TODIRECTORY /opt/sequoiadb/packet TOMACHINE @{testhost}"
                  throwBuildException="1"/>
            <staf location="@{testhost}" service="PROCESS"
                  request="START SHELL COMMAND chmod +x /opt/sequoiadb/packet/${package_name} WAIT 1m"
                  throwBuildException="1"/>     
         </sequential>
      </for>
   </target>
   
   <target name="ready_mysql_package" depends="">
      <var name="package_name" unset="true"/>
      <var name="package_fullname" unset="true"/>
      <!--get run package name-->
      <property name="package_dir" location="${WORKSPACE}/archive/current" />
      <first id="package_fullname">
         <fileset dir="${package_dir}" includes="sequoiasql-mysql*.run" />
      </first>
      <property name="package_fullname" location="${toString:package_fullname}" />
      <basename property="package_name_part" file="${package_fullname}" suffix=".run"/>
      <property name="package_name" value="${package_name_part}.run" />     
      
      <!--copy run package to remote host-->
      <for list="${firsthost}" param="testhost" parallel="false">
         <sequential>
            <staf location="@{testhost}" service="FS"
                  request="CREATE DIRECTORY ${CI_WORK_DIR}"
                  throwBuildException="1"/>
            <staf location="local" service="FS"
                  request="COPY FILE ${package_fullname} TODIRECTORY /opt/sequoiadb/packet TOMACHINE @{testhost}"
                  throwBuildException="1"/>
            <staf location="@{testhost}" service="PROCESS"
                  request="START SHELL COMMAND chmod +x /opt/sequoiadb/packet/${package_name} WAIT 1m"
                  throwBuildException="1"/>     
         </sequential>
      </for>
   </target>
   
   <target name="install" depends="">       
      <for list="${firsthost}" param="testhost" parallel="true">
         <sequential> 
            <staf location="@{testhost}" service="FS"
                  request="QUERY ENTRY ${INSTALL_DIR}"
                  resultPrefix="check_dir"
                  throwBuildException=""/>
            <if>
               <equals arg1="${check_dir.rc}" arg2="48" />
               <else>
                  <fail message="exec: QUERY ENTRY ${INSTALL_DIR}, expect directory not exists. expect return code is 48, actual: ${check_dir.rc}"/>
               </else>
            </if>
            
            <staf location="@{testhost}" service="PROCESS"
                  request="START SHELL COMMAND ${CI_WORK_DIR}/${package_name} --mode unattended --SMS true WAIT 20m STDERRTOSTDOUT RETURNSTDOUT"
                  resultPrefix="install"
                  throwBuildException="1"/>
            <propertyregex property="install_rc" input="${install.result}" regexp="Return\ Code:\ (.*)\n" select="\1"/>
            <if>
               <equals arg1="${install_rc}" arg2="0" />
               <else>
                  <fail message="exec: ${CI_WORK_DIR}/${package_name} --mode unattended, return code is not 0"/>
               </else>
            </if>
         </sequential>         
      </for>
   </target>
   
   <target name="change_limits">
      <for list="${firsthost}" param="testhost" parallel="true">
         <sequential> 
            <staf location="@{testhost}" service="PROCESS"
                  request="START SHELL COMMAND ${INSTALL_DIR}/bin/sdbcmtop WAIT 5m STDERRTOSTDOUT RETURNSTDOUT"
                  resultPrefix="cmstop"
                  throwBuildException="1"/>
                  
            <staf location="@{testhost}" service="PROCESS"
                  request="START SHELL COMMAND sed -i 's/core_file_size=0/core_file_size=-1/g' ${INSTALL_DIR}/conf/limits.conf WAIT 10m STDERRTOSTDOUT RETURNSTDOUT"
                  resultPrefix="sed"
                  throwBuildException="1"/>
            <propertyregex property="sed_rc" input="${sed.result}" regexp="Return\ Code:\ (.*)\n" select="\1"/>
            <if>
               <equals arg1="${sed_rc}" arg2="0" />
               <else>
                  <fail message="exec: sed 's/core_file_size=0/core_file_size=-1/g' ${INSTALL_DIR}/conf/limits.conf, return code is not 0"/>
               </else>
            </if>
            
            <staf location="@{testhost}" service="PROCESS"
                  request="START SHELL COMMAND ${INSTALL_DIR}/bin/sdbcmart WAIT 5m STDERRTOSTDOUT RETURNSTDOUT"
                  resultPrefix="sdbcmart"
                  throwBuildException="1"/>
         </sequential>         
      </for>
   </target>
   
</project>
