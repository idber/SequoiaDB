<!-- ============================================================================
@description:  install and deploy sequoiadb
@parameter:    DEPLOY_MODE: G1D3|G3D3|STANDALONE, from jenkins configure page
               TEST_TYPE: from build.xml
               testhost_list: from build.xml
@author:       Ting YU 2016-10-19
============================================================================= -->

<project default="main" basedir="../../">  
   <property file="${basedir}/src/conf/test.conf" /> 
   <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
         <pathelement location="${basedir}/lib/ant-contrib-1.0b2.jar" />
      </classpath>
   </taskdef>
   <taskdef name="staf" classname="com.ibm.staf.ant.taskdef.STAF" >
      <classpath>
         <pathelement location="${basedir}/lib/STAFAnt.jar" />
      </classpath>
   </taskdef>    
   
   <target name="main">  
      <propertyregex property="firsthost" input="${testhost_list}" regexp=",(.*)" replace="" defaultValue="${testhost_list}"/>
      <if>
         <equals arg1="${TEST_TYPE}" arg2="SMOKETEST"/>
         <then>
            <antcall target="clear_cluster"/>
            <antcall target="ready_bin_and_conf"/>
            <antcall target="ready_cm"/>
         </then>
         <else>
            <antcall target="uninstall"/>
            <antcallback target="ready_package" return="package_name"/><!--variable package_name used in target install--> 
            <antcall target="install"/>
         </else>
      </if>  
      <antcall target="change_limits"/>
      <antcall target="deploy"/> 
      <antcall target="create_es_nodeconf"/>
   </target>
   
   <target name="clear_cluster">
      <var name="cmd_clear_cluster" 
           value="${INSTALL_DIR}/bin/sdbcmtop;${INSTALL_DIR}/bin/sdbstop -t all;rm -rf ${INSTALL_DIR} "/>
      <for list="${testhost_list}" param="testhost" parallel="true">
         <sequential> 
            <staf location="@{testhost}" service="PROCESS"
                  request="START SHELL COMMAND ${cmd_clear_cluster} WAIT 10m RETURNSTDOUT RETURNSTDERR"
                  throwBuildException=""/>
         </sequential>
      </for>
   </target>
   
   <target name="ready_bin_and_conf">
      <for list="${testhost_list}" param="testhost" parallel="true">
         <sequential> 
            <staf location="@{testhost}" service="FS"
                  request="CREATE DIRECTORY ${INSTALL_DIR} FULLPATH"
                  throwBuildException="1"/>
                  
            <for param="fullfilename">
               <path>
                  <fileset dir="${WORKSPACE}/release" includes="*.tar.gz"/>
               </path>
               <sequential>
                  <staf location="local" service="FS"
                        request="COPY FILE @{fullfilename} TODIRECTORY ${INSTALL_DIR} TOMACHINE @{testhost}"
                        throwBuildException="1"/>
                  <local name="tarname"/>
                  <propertyregex property="tarname" input="@{fullfilename}" regexp="${WORKSPACE}/release/(.*.tar.gz)" select="\1" casesensitive="false"/>
                  <!--untar-->
                  <staf location="@{testhost}" service="PROCESS"
                        request="START SHELL COMMAND tar zxvf ${INSTALL_DIR}/${tarname} -C ${INSTALL_DIR} WAIT 10m RETURNSTDERR"
                        throwBuildException="1"/>
                        
                  <!--clear tar.gz-->
                  <staf location="@{testhost}" service="FS"
                        request="DELETE ENTRY ${INSTALL_DIR}/${tarname} RECURSE CONFIRM"
                        throwBuildException=""/>
               </sequential>
            </for>
         </sequential>
      </for>
   </target>
   
   <target name="ready_cm">
      <var name="cmd_start_cm" 
           value="${INSTALL_DIR}/bin/sdbcmart"/>
      <for list="${testhost_list}" param="testhost" parallel="true">
         <sequential> 
            <staf location="@{testhost}" service="PROCESS"
                  request="START SHELL COMMAND chmod 777 ${INSTALL_DIR}/bin -R WAIT 10m RETURNSTDOUT RETURNSTDERR"
                  throwBuildException=""/>
            <staf location="@{testhost}" service="PROCESS"
                  request="START SHELL COMMAND ${cmd_start_cm} WAIT 10m RETURNSTDOUT RETURNSTDERR"
                  throwBuildException=""/>
         </sequential>
      </for>
   </target>
   
   <target name="uninstall" depends="">    
      <for list="${testhost_list}" param="testhost" parallel="true">
         <sequential>           
            <staf location="@{testhost}" service="PROCESS"
                  request="START SHELL COMMAND ${INSTALL_DIR}/uninstall --mode unattended WAIT 10m RETURNSTDOUT RETURNSTDERR"
                  throwBuildException="1"/>
            <staf location="@{testhost}" service="FS"
                  request="DELETE ENTRY ${INSTALL_DIR} RECURSE CONFIRM"
                  throwBuildException=""/>
            <if>
               <equals arg1="${TEST_TYPE}" arg2="PERFORMANCETEST_TPCC" />
               <then>
                  <for list="${TPCC_DBPATH_LIST}" param="dbpath" parallel="false">
                     <sequential>
                        <staf location="@{testhost}" service="FS"
                              request="DELETE ENTRY @{dbpath} RECURSE CONFIRM"
                              throwBuildException=""/>
                     </sequential>
                  </for>
               </then>
               <elseif>
                  <equals arg1="${TEST_TYPE}" arg2="RELIABILITYTEST"/>
                  <then>
                     <for list="${RELIABILITYTEST_DBPATH_LIST}" param="dbpath" parallel="false">
                        <sequential>
                           <staf location="@{testhost}" service="FS"
                                 request="DELETE ENTRY @{dbpath} RECURSE CONFIRM"
                                 throwBuildException=""/>
                        </sequential>
                     </for>
                  </then>
               </elseif>
            </if>

            <staf location="@{testhost}" service="PROCESS"
                  request="START SHELL COMMAND ps -ef |grep sdbseadapter |grep -v grep | awk '{print $2}' |  xargs kill -9  WAIT 10m RETURNSTDOUT RETURNSTDERR"
                  throwBuildException="1"/>
         </sequential>
      </for>
   </target>
   
   <target name="ready_package" depends="">
      <!--get run package name-->
      <property name="package_dir" location="${WORKSPACE}/archive/current" />
      <first id="package_fullname">
         <fileset dir="${package_dir}" includes="sequoiadb*.run" />
      </first>
      <property name="package_fullname" location="${toString:package_fullname}" />
      <basename property="package_name_part" file="${package_fullname}" suffix=".run"/>
      <property name="package_name" value="${package_name_part}.run" />     
      
      <!--copy run package to remote host-->
      <for list="${testhost_list}" param="testhost" parallel="false">
         <sequential>
            <staf location="@{testhost}" service="FS"
                  request="CREATE DIRECTORY ${CI_WORK_DIR}"
                  throwBuildException="1"/>
            <staf location="local" service="FS"
                  request="COPY FILE ${package_fullname} TODIRECTORY ${CI_WORK_DIR} TOMACHINE @{testhost}"
                  throwBuildException="1"/>
            <staf location="@{testhost}" service="PROCESS"
                  request="START SHELL COMMAND chmod +x ${CI_WORK_DIR}/${package_name} WAIT 1m"
                  throwBuildException="1"/>     
         </sequential>
      </for>
   </target>
   
   <target name="install" depends="">       
      <for list="${testhost_list}" param="testhost" parallel="true">
         <sequential> 
            <staf location="@{testhost}" service="FS"
                  request="QUERY ENTRY ${INSTALL_DIR}"
                  resultPrefix="check_dir"
                  throwBuildException=""/>
            <if>
               <equals arg1="${check_dir.rc}" arg2="48" />
               <else>
                  <fail message="exec: QUERY ENTRY ${INSTALL_DIR}, expect directory not exists. expect return code is 48, actual: ${check_dir.rc}"/>
               </else>
            </if>
            
            <staf location="@{testhost}" service="PROCESS"
                  request="START SHELL COMMAND ${CI_WORK_DIR}/${package_name} --mode unattended WAIT 20m STDERRTOSTDOUT RETURNSTDOUT"
                  resultPrefix="install"
                  throwBuildException="1"/>
            <propertyregex property="install_rc" input="${install.result}" regexp="Return\ Code:\ (.*)\n" select="\1"/>
            <if>
               <equals arg1="${install_rc}" arg2="0" />
               <else>
                  <fail message="exec: ${CI_WORK_DIR}/${package_name} --mode unattended, return code is not 0"/>
               </else>
            </if>
         </sequential>         
      </for>
   </target>
   
   <target name="change_limits">
      <for list="${testhost_list}" param="testhost" parallel="true">
         <sequential> 
            <staf location="@{testhost}" service="PROCESS"
                  request="START SHELL COMMAND ${INSTALL_DIR}/bin/sdbcmtop WAIT 5m STDERRTOSTDOUT RETURNSTDOUT"
                  resultPrefix="cmstop"
                  throwBuildException="1"/>
                  
            <staf location="@{testhost}" service="PROCESS"
                  request="START SHELL COMMAND sed -i 's/core_file_size=0/core_file_size=-1/g' ${INSTALL_DIR}/conf/limits.conf WAIT 10m STDERRTOSTDOUT RETURNSTDOUT"
                  resultPrefix="sed"
                  throwBuildException="1"/>
            <propertyregex property="sed_rc" input="${sed.result}" regexp="Return\ Code:\ (.*)\n" select="\1"/>
            <if>
               <equals arg1="${sed_rc}" arg2="0" />
               <else>
                  <fail message="exec: sed 's/core_file_size=0/core_file_size=-1/g' ${INSTALL_DIR}/conf/limits.conf, return code is not 0"/>
               </else>
            </if>
            
            <staf location="@{testhost}" service="PROCESS"
                  request="START SHELL COMMAND ${INSTALL_DIR}/bin/sdbcmart WAIT 5m STDERRTOSTDOUT RETURNSTDOUT"
                  resultPrefix="sdbcmart"
                  throwBuildException="1"/>
         </sequential>         
      </for>
   </target>
   
   <target name="create_es_nodeconf">
      <staf location="${firsthost}" service="FS"
                  request="DELETE ENTRY ${INSTALL_DIR}/conf/sdbseadpter RECURSE CONFIRM"
                  throwBuildException=""/>
      <staf location="${firsthost}" service="FS"
                  request="CREATE DIRECTORY ${INSTALL_DIR}/conf/sdbseadpter FULLPATH"
                  throwBuildException="1"/>
      <staf location="${firsthost}" service="PROCESS"
            request="START SHELL COMMAND chown jenkins:jenkins ${INSTALL_DIR}/conf/sdbseadpter -R WAIT 10m RETURNSTDERR"
            throwBuildException="1"/>
      <hostinfo prefix="host" />
      <if>
         <equals arg1="${TEST_TYPE}" arg2="RELIABILITYTEST"/>
         <then>
            <mkdir dir="${INSTALL_DIR}"/>
            <mkdir dir="${INSTALL_DIR}/database"/>
            <mkdir dir="${INSTALL_DIR}/conf"/>
            <delete dir="${INSTALL_DIR}/database/data" failonerror="false"/>
            <mkdir dir="${INSTALL_DIR}/database/data"/>
            <staf location="${firsthost}" service="FS"
                  request="COPY DIRECTORY ${INSTALL_DIR}/database/data TODIRECTORY ${INSTALL_DIR}/database/data TOMACHINE ${host.NAME} RECURSE"
                  throwBuildException="1"/>
            <delete dir="${INSTALL_DIR}/conf/samples" failonerror="false"/>
            <mkdir dir="${INSTALL_DIR}/conf/samples"/>
            <staf location="${firsthost}" service="FS"
                  request="COPY FILE ${INSTALL_DIR}/conf/samples/sdbseadapter.conf TODIRECTORY ${INSTALL_DIR}/conf/samples TOMACHINE ${host.NAME}"
                  throwBuildException="1"/>
         </then>
      </if>
      <if>
         <or>
            <equals arg1="${DEPLOY_MODE}" arg2="G1D3"/>
            <equals arg1="${DEPLOY_MODE}" arg2="G3D3"/>
         </or>
         <then>
            <for param="dirtype">
               <path>
                  <dirset dir="${INSTALL_DIR}/database/data" includes="*" />
               </path>
               <sequential>
                  <var name="svcname" unset="true"/>
                  <basename property="svcname" file="@{dirtype}"/>
                  <mkdir dir="${INSTALL_DIR}/conf/sdbseadpter/${svcname}"/>
                  <copy file="${INSTALL_DIR}/conf/samples/sdbseadapter.conf" todir="${INSTALL_DIR}/conf/sdbseadpter/${svcname}"/>
                  
                  <replace file="${INSTALL_DIR}/conf/sdbseadpter/${svcname}/sdbseadapter.conf" token="datanodehost=" value="datanodehost=localhost"/>
                  <replace file="${INSTALL_DIR}/conf/sdbseadpter/${svcname}/sdbseadapter.conf" token="datasvcname=" value="datasvcname=${svcname}"/>
                  <replace file="${INSTALL_DIR}/conf/sdbseadpter/${svcname}/sdbseadapter.conf" token="searchenginehost=" value="searchenginehost=${ES_IP}"/>
                  <replace file="${INSTALL_DIR}/conf/sdbseadpter/${svcname}/sdbseadapter.conf" token="searchengineport=" value="searchengineport=${ES_PORT}"/>
                  <replace file="${INSTALL_DIR}/conf/sdbseadpter/${svcname}/sdbseadapter.conf" token="diaglevel=3" value="diaglevel=5"/>
               </sequential>
            </for>
            <!--copy to other host -->
            
            <for list="${testhost_list}" param="testhost" parallel="true">
               <sequential>
                  <if>
                     <equals arg1="@{testhost}" arg2="${host.NAME}" />
                     <else>
                        <staf location="local" service="FS"
                              request="COPY DIRECTORY ${INSTALL_DIR}/conf/sdbseadpter TODIRECTORY ${INSTALL_DIR}/conf/sdbseadpter TOMACHINE @{testhost} RECURSE"
                              throwBuildException="1"/>
                     </else>
                  </if>
                  <staf location="@{testhost}" service="PROCESS"
                        request="START SHELL COMMAND chown sdbadmin:sdbadmin_group ${INSTALL_DIR}/conf/sdbseadpter -R WAIT 10m RETURNSTDERR"
                        throwBuildException="1"/>
                  <staf location="@{testhost}" service="PROCESS"
                        request="START SHELL COMMAND chmod 755 ${INSTALL_DIR}/conf/sdbseadpter -R WAIT 10m RETURNSTDERR"
                        throwBuildException="1"/>
                  
                  <for param="dirtype">
                     <path>
                        <dirset dir="${INSTALL_DIR}/database/data" includes="*" />
                     </path>
                     <sequential>
                        <var name="svcname" unset="true"/>
                        <basename property="svcname" file="@{dirtype}"/>
                        
                        <staf location="@{testhost}" service="PROCESS"
                              request="START SHELL COMMAND ${INSTALL_DIR}/bin/sdbseadapter -c ${INSTALL_DIR}/conf/sdbseadpter/${svcname} &amp; WAIT 10m RETURNSTDERR"
                              throwBuildException="1"/>
                     </sequential>
                  </for>
               </sequential>
            </for>

         </then>
      </if>
   </target>
   
   <target name="deploy" depends="">
      <!--format host list-->
      <propertyregex property="testhost_jsarr" input="${testhost_list}" regexp="," replace="','" defaultValue="${testhost_list}"/>
      <var name="testhost_jsarr" value="['${testhost_jsarr}']"/>
      
      <!--create dbPath-->
      <if>
         <equals arg1="${TEST_TYPE}" arg2="PERFORMANCETEST_TPCC" />
         <then>
            <for list="${testhost_list}" param="testhost" parallel="true">
               <sequential>
                  <for list="${TPCC_DBPATH_LIST}" param="dbpath" parallel="false">
                     <sequential>
                        <staf location="@{testhost}" service="FS"
                              request="CREATE DIRECTORY @{dbpath}"
                              throwBuildException="1"/>
                        <staf location="@{testhost}" service="PROCESS"
                              request="START SHELL COMMAND chown sdbadmin:sdbadmin_group @{dbpath} WAIT 1m"
                              throwBuildException="1"/>     
                     </sequential>
                  </for>
               </sequential>
            </for>
         </then>
         <elseif>
            <equals arg1="${TEST_TYPE}" arg2="RELIABILITYTEST"/>
            <then>
               <for list="${testhost_list}" param="testhost" parallel="true">
                  <sequential>
                     <for list="${RELIABILITYTEST_DBPATH_LIST}" param="dbpath" parallel="false">
                        <sequential>
                           <staf location="@{testhost}" service="FS"
                                 request="CREATE DIRECTORY @{dbpath}"
                                 throwBuildException="1"/>
                           <staf location="@{testhost}" service="PROCESS"
                                 request="START SHELL COMMAND chown sdbadmin:sdbadmin_group @{dbpath} WAIT 1m"
                                 throwBuildException="1"/>     
                        </sequential>
                     </for>
                  </sequential>
               </for>
            </then>
         </elseif>
      </if>
      
      <!--copy sdb shell to localhost-->
      <delete file="${CI_WORK_DIR}/sdb" failonerror="false"/>
      <!--mkdir dir="${CI_WORK_DIR}"/-->
      <staf location="${firsthost}" service="FS"
            request="COPY FILE ${INSTALL_DIR}/bin/sdb TODIRECTORY ${CI_WORK_DIR}"
            throwBuildException="1"/>
      <staf location="local" service="PROCESS"
            request="START SHELL COMMAND chmod a+x ${CI_WORK_DIR}/sdb WAIT 1m"
            throwBuildException="1"/> 

      <!--exec deploy.js-->
      <if>
         <equals arg1="${TEST_TYPE}" arg2="NORMALTEST" />
         <then>
            <var name="diagLevel" value="5"/>
         </then>
      </if>
      <if>
         <equals arg1="${TEST_TYPE}" arg2="LARGEDATATEST" />
         <then>
            <var name="diagLevel" value="3"/>
         </then>
      </if>
      <if>
         <equals arg1="${TEST_TYPE}" arg2="SYNCTEST" />
         <then>
            <var name="diagLevel" value="5"/>
         </then>
      </if>
      <if>
         <equals arg1="${TEST_TYPE}" arg2="CONFIGURETEST" />
         <then>
            <var name="diagLevel" value="5"/>
            <var name="DEPLOY_MODE" value="CONFIGURE"/>
         </then>
      </if>
      <if>
         <equals arg1="${TEST_TYPE}" arg2="RELIABILITYTEST" />
         <then>
            <var name="diagLevel" value="5"/>
            <var name="DEPLOY_MODE" value="RELIABILITY"/>
         </then>
      </if>
      <if>
         <equals arg1="${TEST_TYPE}" arg2="SMOKETEST" />
         <then>
            <var name="diagLevel" value="5"/>
         </then>
      </if>
      <if>
         <equals arg1="${TEST_TYPE}" arg2="PERFORMANCETEST_TPCC" />
         <then>
            <var name="diagLevel" value="3"/>
            <var name="DEPLOY_MODE" value="TPCC"/>
         </then>
      </if>
            
      <property name="sdb_shell" value="${CI_WORK_DIR}/sdb"/>
      <property name="deploy_cmd1" value="-f '${basedir}/src/conf/deploy_conf_${DEPLOY_MODE}.js,${basedir}/src/install_deploy/deploy.js'" />
      <property name="deploy_cmd2" value="-e &quot;var hostList=${testhost_jsarr};var diagLevel=${diagLevel};&quot;" />
      <echo message="exec cmd: ${sdb_shell} ${deploy_cmd1} ${deploy_cmd2}"/>
      <exec executable="${sdb_shell}" timeout="1200000" outputproperty="deploy_out" failonerror="true" logError="true">                                   
         <arg line="${deploy_cmd1} ${deploy_cmd2}" />
      </exec>
      <echo message="${deploy_out}"/>
   </target>

</project>
