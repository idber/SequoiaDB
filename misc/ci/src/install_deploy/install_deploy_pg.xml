<!-- ============================================================================
@description:  install and deploy pg, for for performance_tpcc_test
@parameter:    testhost_list: from build.xml
@author:       Ting YU 2017-01-22
============================================================================= -->

<project default="main" basedir="../../">  
   <property file="${basedir}/src/conf/test.conf" /> 
   <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
         <pathelement location="${basedir}/lib/ant-contrib-1.0b2.jar" />
      </classpath>
   </taskdef>
   <taskdef name="staf" classname="com.ibm.staf.ant.taskdef.STAF">
      <classpath>
            <pathelement location="${basedir}/lib/STAFAnt.jar" />
      </classpath>
   </taskdef>
   
   <target name="main">
      <if>
         <isset property="testhost_list"/>
         <else>
            <propertycopy name="testhost_list" from="${TEST_TYPE}_HOST" />
         </else>
      </if>
      
      <antcall target="uninstall"/>
      <antcallback target="send_package" return="package_name"/><!--variable package_name used in target install--> 
      <antcall target="install"/>
      <antcall target="deploy"/>    
   </target>
   
   <target name="uninstall" >    
      <for list="${testhost_list}" param="testhost" parallel="false">
         <sequential>
            <!--stop process-->
            <var name="stop_pg_cmd" value="su - sdbadmin -c 'export LD_LIBRARY_PATH=${INSTALL_PG_DIR}/lib;${INSTALL_PG_DIR}/bin/pg_ctl stop -s -D ${INSTALL_PG_DIR}/pg_data -m fast'"/>
            <staf location="@{testhost}" service="PROCESS"
                  request="START SHELL COMMAND ${stop_pg_cmd} WAIT 10m RETURNSTDOUT RETURNSTDERR"
                  throwBuildException=""/>
            <var name="list_pg_cmd" value="su - sdbadmin -c 'export LD_LIBRARY_PATH=${INSTALL_PG_DIR}/lib;${INSTALL_PG_DIR}/bin/pg_ctl status -D ${INSTALL_PG_DIR}/pg_data'"/>
            <var name="list_pg.result" unset="true"/>
            <staf location="@{testhost}" service="PROCESS"
                  resultPrefix="list_pg"
                  request="START SHELL COMMAND ${list_pg_cmd} WAIT STDERRTOSTDOUT RETURNSTDOUT"
                  throwBuildException="1"/> 
            <var name="list_pg_rc" unset="true"/>
            <propertyregex property="list_pg_rc" input="${list_pg.result}" regexp="Return\ Code:\ (.*)\n" select="\1"/>
            <if>
               <equals arg1="${list_pg_rc}" arg2="3" />
               <else>
                  <if>
                     <equals arg1="${list_pg_rc}" arg2="127" />
                     <else>
                        <fail message="exec: ${list_pg_cmd}, in host: @{testhost}, expect return code: 3 or 127, actual: ${list_pg_rc}"/>
                     </else>
                  </if>   
               </else>
            </if>
            
            <!--uninstall-->
            <staf location="@{testhost}" service="PROCESS"
                  request="START SHELL COMMAND ${INSTALL_PG_DIR}/uninstall --mode unattended WAIT 10m RETURNSTDOUT RETURNSTDERR"
                  throwBuildException="1"/>
                  
            <!--delete directory-->
            <staf location="@{testhost}" service="FS"
                  request="DELETE ENTRY ${INSTALL_PG_DIR} RECURSE CONFIRM"
                  throwBuildException=""/>
         </sequential>
      </for>
   </target>
   
   <target name="send_package" >
      <!--get run package name-->
      <property name="package_dir" location="${WORKSPACE}/archive/current" />
      
      <first id="package_fullname">
         <fileset dir="${package_dir}" includes="sequoiasql*.run" />
      </first>
      <property name="package_fullname" location="${toString:package_fullname}" />
      <basename property="package_name_part" file="${package_fullname}" suffix=".run"/>
      <property name="package_name" value="${package_name_part}.run" />
      <!--copy run package to remote host-->
      <for list="${testhost_list}" param="testhost" parallel="false">
         <sequential>
            <staf location="@{testhost}" service="FS"
                  request="CREATE DIRECTORY ${CI_WORK_DIR}"
                  throwBuildException="1"/>
            <staf location="local" service="FS"
                  request="COPY FILE ${package_fullname} TODIRECTORY ${CI_WORK_DIR} TOMACHINE @{testhost}"
                  throwBuildException="1"/>
            <staf location="@{testhost}" service="PROCESS"
                  request="START SHELL COMMAND chmod +x ${CI_WORK_DIR}/${package_name} WAIT 1m"
                  throwBuildException="1"/>     
         </sequential>
      </for>
   </target>
   
   <target name="install" >       
      <for list="${testhost_list}" param="testhost" parallel="false">
         <sequential> 
            <staf location="@{testhost}" service="FS"
                  request="QUERY ENTRY ${INSTALL_PG_DIR}"
                  resultPrefix="check_dir"
                  throwBuildException=""/>
            <if>
               <equals arg1="${check_dir.rc}" arg2="48" />
               <else>
                  <fail message="exec: QUERY ENTRY ${INSTALL_PG_DIR}, expect directory not exists. expect return code is 48, actual: ${check_dir.rc}"/>
               </else>
            </if>
            
            <staf location="@{testhost}" service="PROCESS"
                  request="START SHELL COMMAND ${CI_WORK_DIR}/${package_name} --mode unattended WAIT 10m STDERRTOSTDOUT RETURNSTDOUT"
                  resultPrefix="install"
                  throwBuildException="1"/>
            <propertyregex property="install_rc" input="${install.result}" regexp="Return\ Code:\ (.*)\n" select="\1"/>
            <if>
               <equals arg1="${install_rc}" arg2="0" />
               <else>
                  <fail message="exec: ${CI_WORK_DIR}/${package_name} --mode unattended, return code: ${install_rc}"/>
               </else>
            </if>
         </sequential>         
      </for>
   </target>
   
   <target name="deploy" >
      <var name="testscript_dir" value="${CI_WORK_DIR}/script/src/install_deploy" />
      <var name="testscript_log" value="${CI_WORK_DIR}/script/src/install_deploy/install_deploy_pg.log" />
      
      <!--ready script in remote host-->
      <for list="${testhost_list}" param="testhost" parallel="true">
         <sequential>
            <staf location="local" service="FS"
                  request="COPY DIRECTORY ${basedir} TODIRECTORY ${CI_WORK_DIR}/script TOMACHINE @{testhost} RECURSE"
                  throwBuildException="1"/>
            <staf location="@{testhost}" service="FS"
                  request="DELETE ENTRY ${testscript_log} CONFIRM"/>
         </sequential>
      </for>
      
      <var name="deploy_remote_cmd" value="ant -f ${testscript_dir}/install_deploy_pg.xml deploy_remote_pg -DINSTALL_PG_DIR=${INSTALL_PG_DIR}" />
      <for list="${testhost_list}" param="testhost" parallel="false">
         <sequential>
            <echo>${line.separator}*****************begin to deploy in @{testhost}***********************</echo>
            <echo>exec cmd: ${deploy_remote_cmd}</echo>
                        
            <staf location="@{testhost}" service="PROCESS"
                  resultPrefix="remote_exec"
                  request="START SHELL COMMAND ${deploy_remote_cmd} STDOUTAPPEND ${testscript_log} STDERRTOSTDOUT WAIT"
                  throwBuildException="1"/>
            <staf location="@{testhost}" service="FS"
                  request="GET FILE ${testscript_log} TEXT"
                  throwBuildException="1"/>
                  
            <propertyregex property="remote_exec_rc" input="${remote_exec.result}" regexp="Return\ Code:\ (.*)\n" select="\1"/>      
            <if>
               <equals arg1="${remote_exec_rc}" arg2="0" />
               <else>
                  <fail message="exec: ${deploy_remote_cmd}, in host: @{testhost}, return code: ${remote_exec_rc}"/>
               </else>
            </if>

         </sequential>
      </for>
   </target>
   
   <target name="deploy_remote_pg">
      <!--set env variable-->
      <echo>*****************begin to set env variable***********************</echo>
      <var name="export_str" value="export LD_LIBRARY_PATH=${INSTALL_PG_DIR}/lib:${LD_LIBRARY_PATH}"/>
      <exec executable="bash" outputproperty="sdbadmin_home" failonerror="true" logError="true">
         <arg value="-c" />
         <arg line="&quot;echo ~sdbadmin&quot;" />
      </exec>
      <var name="env_file_list" value="${sdbadmin_home}/.profile,${sdbadmin_home}/.bashrc,${sdbadmin_home}/.bash_profile"/>
      
      <for list="${env_file_list}" param="envfile" parallel="false">
         <sequential>
            <var name="grep_rc" unset="true"/>
            <exec executable="grep" resultproperty="grep_rc" failonerror="false">
               <arg line='-q "^${export_str}$" @{envfile}' />
            </exec>
            <if>
               <equals arg1="${grep_rc}" arg2="0" />
               <else>
                  <echo file="@{envfile}" message="${export_str}"/>
                  <chown file="@{envfile}" owner="sdbadmin:sdbadmin_group" />
               </else>
            </if>
         </sequential>
      </for>
      
      <!--change owner-->
      <echo>*****************begin to change owner to sdbadmin***********************</echo>
      <mkdir dir="${INSTALL_PG_DIR}/pg_data"/>
      <exec executable="chown" failonerror="true" logError="true">
         <arg line='-hR sdbadmin:sdbadmin_group ${INSTALL_PG_DIR}' />
      </exec>
            
      <!--init pg_data-->
      <echo>*****************begin to init db***********************</echo>
      <exec executable="su" spawn="false" failonerror="true" logError="true">
         <arg line=" - sdbadmin -c '${INSTALL_PG_DIR}/bin/initdb -D ${INSTALL_PG_DIR}/pg_data'" />
      </exec>
      
      <!--configure pg-->
      <echo>*****************begin to configure pg***********************</echo>
      <replace file="${INSTALL_PG_DIR}/pg_data/postgresql.conf" 
               token="#log_connections = off" value="log_connections = on"/>
      <replace file="${INSTALL_PG_DIR}/pg_data/postgresql.conf" 
               token="#log_disconnections = off" value="log_disconnections = on"/>
      <replace file="${INSTALL_PG_DIR}/pg_data/postgresql.conf" 
               token="#exit_on_error = off" value="exit_on_error = on"/>
      <replace file="${INSTALL_PG_DIR}/pg_data/postgresql.conf" 
               token="#log_line_prefix = ''" value="log_line_prefix = '%m %p %r'"/>
      <replace file="${INSTALL_PG_DIR}/pg_data/postgresql.conf" 
               token="#log_line_prefix = ''" value="log_line_prefix = '%m %p %r'"/>
      <replace file="${INSTALL_PG_DIR}/pg_data/postgresql.conf" 
               token="#listen_addresses = 'localhost'" value="listen_addresses = '0.0.0.0'"/>
      <replace file="${INSTALL_PG_DIR}/pg_data/pg_hba.conf" 
               token="# IPv4 local connections:" 
               value="# IPv4 local connections:${line.separator}host   all   all   0.0.0.0/0   trust"/>
      <chown file="${INSTALL_PG_DIR}/pg_data/postgresql.conf" owner="sdbadmin:sdbadmin_group" />
      <chown file="${INSTALL_PG_DIR}/pg_data/pg_hba.conf" owner="sdbadmin:sdbadmin_group" />
      
      <!--start pg-->
      <echo>*****************begin to start pg***********************</echo>
      <exec executable="su" spawn="false" failonerror="true" logError="true">
         <arg line=" - sdbadmin -c '${INSTALL_PG_DIR}/bin/postgres -D ${INSTALL_PG_DIR}/pg_data/ >> ${INSTALL_PG_DIR}/logfile 2>&amp;1 &amp;'" />
      </exec>
   </target>
   
</project>
