<component>
    <name>upgrade_component</name>

    <initializationActionList>
        <setInstallerVariable name="stage" value="upgrade"/>
        <setInstallerVariable name="exist_old_limits_conf" value="true"/>
    </initializationActionList>

    <readyToInstallActionList>
        <setInstallerVariable name="exist_old_limits_conf">
            <value>false</value>
            <ruleList>
                <fileTest condition="not_exists" path="${installdir}/conf/limits.conf"/>
            </ruleList>
        </setInstallerVariable>
        <consoleWrite text="${msg(Upgrade.NormalMsg.BeginUpgrade)}&#xA;"/>
        <consoleWrite text="${msg(Upgrade.NormalMsg.CheckList)}&#xA;"/>

        <!--check /etc/default/sequoiadb exist-->
        <consoleWrite text="${msg(Upgrade.NormalMsg.SystemConfExist)}"/>
        <throwError>
            <text>${msg(Upgrade.ErrorMsg.SystemConfExist)}</text>
            <ruleList>
                <fileTest condition="not_exists" path="${sys_conf_file}"/>
            </ruleList>
        </throwError>
        <consoleWrite text="ok&#xA;"/>

        <!--get sequoiadb user and installdir-->
        <consoleWrite text="${msg(Upgrade.NormalMsg.GetInstallDir.GetUser)}"/>
        <setInstallerVariable name="installdir_inconf" value=""/>
        <setInstallerVariable name="username" value=""/>
        <propertiesFileGet>
            <file>${sys_conf_file}</file>
            <key>INSTALL_DIR</key>
            <variable>installdir_inconf</variable>
            <customErrorMessage>${msg(Upgrade.ErrorMsg.GetInstallDir)}</customErrorMessage>
        </propertiesFileGet>
        <propertiesFileGet>
            <file>${sys_conf_file}</file>
            <key>SDBADMIN_USER</key>
            <variable>username</variable>
            <customErrorMessage>${msg(Upgrade.ErrorMsg.GetUser)}</customErrorMessage>
        </propertiesFileGet>
        <throwError>
            <text>${msg(Upgrade.ErrorMsg.EmptyInstallDir.EmptyUser)}</text>
            <ruleEvaluationLogic>or</ruleEvaluationLogic>
            <ruleList>
                 <compareTextLength text="${username}" logic="equals" length="0"/>
                 <compareTextLength text="${installdir_inconf}" logic="equals" length="0"/>
            </ruleList>
        </throwError>
        <consoleWrite text="ok&#xA;"/>

        <!--check installation exist-->
        <setInstallerVariable name="installdir" value="${installdir_inconf}"/>
        <setInstallerVariable name="project.rollbackBackupDirectory" value="${installdir}/rollback/BackupDir_${time}"/>
        <consoleWrite text="${msg(Upgrade.NormalMsg.InstallationExist)}"/>
        <throwError>
            <text>${msg(Upgrade.ErrorMsg.InstallationExist)}</text>
            <ruleEvaluationLogic>or</ruleEvaluationLogic>
            <ruleList>
                <fileTest condition="not_exists" path="${installdir}"/>
                <fileTest condition="is_empty" path="${installdir}"/>
            </ruleList>
        </throwError>
        <consoleWrite text="ok&#xA;"/>
        
        <!--check ${installdir}/bin/sequoiadb exist-->
        <consoleWrite text="${msg(Upgrade.NormalMsg.SequoiadbExist)}"/>
        <throwError>
            <text>${msg(Upgrade.ErrorMsg.SequoiadbExist)}</text>
            <ruleList>
                <fileTest condition="not_exists" path="${installdir}/bin/sequoiadb"/>
            </ruleList>
        </throwError>
        <consoleWrite text="ok&#xA;"/>

        <!--check version compatibility-->
        <setInstallerVariable name="old_version" value="0"/>
        <setInstallerVariable name="old_svn"     value="0"/>
        <setInstallerVariable name="old_edition" value="C"/>
        <setInstallerVariable name="new_version" value="0"/>
        <setInstallerVariable name="new_svn"     value="0"/>
        <setInstallerVariable name="new_edition" value="C"/>

        <setInstallerVariableFromScriptOutput name="old_version">
            <exec>${installdir}/bin/sequoiadb</exec>
            <execArgs> --version | grep "version" | awk '{print $3}'</execArgs>
        </setInstallerVariableFromScriptOutput>
        <setInstallerVariableFromScriptOutput name="old_svn">
            <exec>${installdir}/bin/sequoiadb</exec>
            <execArgs> --version | grep "Release" | awk '{print $2}'</execArgs>
        </setInstallerVariableFromScriptOutput>
        <setInstallerVariableFromScriptOutput name="old_is_enterprise">
            <exec>${installdir}/bin/sequoiadb</exec>
            <execArgs> --version | grep -i enterprise | wc -l </execArgs>
        </setInstallerVariableFromScriptOutput>
        <setInstallerVariable name="old_edition">
            <value>E</value>
            <ruleList>
                <compareValues value1="${old_is_enterprise}" logic="greater" value2="0"/>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="new_version" value="${project.version}"/>
        <setInstallerVariable name="new_edition">
            <value>E</value>
            <ruleList>
                <compareValues value1="${enterpriseversion}" logic="equals" value2="-enterprise"/>
            </ruleList>
        </setInstallerVariable>

        <setInstallerVariable name="old_edition_full" value="Community">
            <ruleList>
                <compareText logic="equals" text="${old_edition}" value="C"/>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="old_edition_full" value="Enterprise">
            <ruleList>
                <compareText logic="equals" text="${old_edition}" value="E"/>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="new_edition_full" value="Community">
            <ruleList>
                <compareText logic="equals" text="${new_edition}" value="C"/>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="new_edition_full" value="Enterprise">
            <ruleList>
                <compareText logic="equals" text="${new_edition}" value="E"/>
            </ruleList>
        </setInstallerVariable>

        <createDirectory path="${installdir}/tmp_${time}"/>
        <unpackFile>
            <component>upgrade_component</component>
            <folder>files_except_conf</folder>
            <origin>compatible.sh</origin>
            <destination>${installdir}/tmp_${time}</destination>
        </unpackFile>
        <unpackFile>
            <component>upgrade_component</component>
            <folder>files_except_conf</folder>
            <origin>version.conf</origin>
            <destination>${installdir}/tmp_${time}</destination>
        </unpackFile>

        <consoleWrite text="${msg(Upgrade.NormalMsg.JudgeComatible)}"/>
        <changePermissions files="${installdir}/tmp_${time}/compatible.sh" permissions="0755"/>
        <setInstallerVariableFromScriptOutput>
            <customErrorMessage>${msg(Upgrade.ErrorMsg.excuteComatibleSh)}</customErrorMessage>
            <name>is_compatible</name>
            <exec>${installdir}/tmp_${time}/compatible.sh</exec>
            <execArgs>${old_version} ${old_edition} ${new_version} ${new_edition} --db</execArgs>
        </setInstallerVariableFromScriptOutput>
        <deleteFile path="${installdir}/tmp_${time}"/>

        <throwError>
            <text>${msg(Upgrade.ErrorMsg.JudgeComatible)}</text>
            <ruleList>
                <isFalse value="${is_compatible}"/>
            </ruleList>
        </throwError>
        <consoleWrite text="ok&#xA;"/>

        <!--check disk-->
        <consoleWrite text="${msg(Upgrade.NormalMsg.DiskSpace)}"/>
        <checkFreeDiskSpaceFunction/>
        <consoleWrite text="ok&#xA;"/>

        <!--check hostname and ip-->
        <consoleWrite text="${msg(Upgrade.NormalMsg.HostnameIp)}"/>
        <checkHostnameIp/>
        <consoleWrite text="ok&#xA;"/>

        <!--check umask-->
        <consoleWrite text="${msg(Upgrade.NormalMsg.Umask)}"/>
        <checkUmaskFunction/>
        <consoleWrite text="ok&#xA;"/>

        <!--check user and get group-->
        <consoleWrite text="${msg(Upgrade.NormalMsg.UserExist)}"/>
        <throwError>
            <text>${msg(Upgrade.ErrorMsg.UserExist)}</text>
            <ruleList>
                <userTest logic="not_exists" username="${username}"/>
            </ruleList>
        </throwError>
        <setInstallerVariableFromScriptOutput>
            <name>groupname</name>
            <exec>id</exec>
            <execArgs>-ng ${username}</execArgs>
            <customErrorMessage>${msg(Upgrade.ErrorMsg.GetGoup)}</customErrorMessage>
        </setInstallerVariableFromScriptOutput>
        <consoleWrite text="ok&#xA;"/>

        <!--before upgrade, stop service -->
        <consoleWrite text="${msg(Upgrade.NormalMsg.StopProcess)}"/>
        <runProgram>
            <program>service</program>
            <programArguments> sdbcm status</programArguments>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
        </runProgram>
        <setInstallerVariable name="service_origin_status" value="${program_exit_code}"/>
        <setInstallerVariable name="cm_num" value="-1"/>
        <setInstallerVariableFromScriptOutput>
            <name>cm_num</name>
            <exec>${installdir}/bin/sdblist</exec>
            <execArgs>-t cm | grep -v "Total" | wc -l</execArgs>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
        </setInstallerVariableFromScriptOutput>
        <setInstallerVariable>
            <name>service_origin_status</name>
            <value>0</value>
            <ruleList>
                <compareValues value1="${cm_num}" logic="greater" value2="0"/>
            </ruleList>
        </setInstallerVariable>
        <actionGroup>
            <actionList>
                <runProgram>
                    <program>service</program>
                    <programArguments> sdbcm stop</programArguments>
                    <abortOnError>0</abortOnError>
                    <ruleList>
                       <compareText logic="does_not_equal" text="${SMS}" value="only"/>
                    </ruleList>
                </runProgram>
                <runProgram>
                    <program>${installdir}/bin/sdbcmtop</program>
                    <programArguments></programArguments>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
            </actionList>
            <ruleList>
                <compareText logic="equals" text="${service_origin_status}" value="0"/>
            </ruleList>
        </actionGroup>
        <setInstallerVariable name="process_num" value="-1"/>
        <setInstallerVariableFromScriptOutput>
            <name>process_num</name>
            <exec>${installdir}/bin/sdblist</exec>
            <execArgs>-t all | grep -v "Total" | wc -l</execArgs>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
        </setInstallerVariableFromScriptOutput>
        <if>
            <conditionRuleList>
                <compareText logic="does_not_equal" text="${SMS}" value="false"/>
            </conditionRuleList>
            <actionList>
                <stopOM/>
            </actionList>
        </if>
       <!--check om and om plugin-->
        <setInstallerVariableFromScriptOutput>
            <name>process_om_num</name>
            <exec>${installdir}/bin/sdblist</exec>
            <execArgs>-t om | grep -v "Total" | wc -l</execArgs>
        </setInstallerVariableFromScriptOutput>
        
        <setInstallerVariable>
            <name>service_origin_status</name>
            <value>0</value>
            <ruleList>
                <compareValues value1="${process_num}" logic="greater" value2="0"/>
            </ruleList>
        </setInstallerVariable>
        <runProgram>
            <program>${installdir}/bin/sdbstop</program>
            <programArguments>-t all</programArguments>
            <runAs>${username}</runAs>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
            <ruleList>
               <compareText logic="does_not_equal" text="${SMS}" value="only"/>
            </ruleList>
        </runProgram>

        <!--check process has been stoped or not-->
        <createDirectory path="${installdir}/tmp_${time}"/>
        <unpackFile>
           <component>upgrade_component</component>
           <folder>files_except_conf</folder>
           <origin>bin/sdblist</origin>
           <destination>${installdir}/tmp_${time}</destination>
        </unpackFile>
        <changePermissions files="${installdir}/tmp_${time}/sdblist" permissions="0755"/>
        <if>
            <conditionRuleList>
                <isTrue value="${force}"/>
            </conditionRuleList>
            <actionList>
                <runProgram>
                    <program>${installdir}/tmp_${time}/sdblist</program>
                    <programArguments>-t all | grep -v "Total" | awk '{print $2}' | awk -F '(' '{print $2}' | awk -F ')' '{print "kill -9 " $1}' | bash</programArguments>
                </runProgram>
            </actionList>
        </if>
        <setInstallerVariableFromScriptOutput>
            <name>process_num</name>
            <exec>${installdir}/tmp_${time}/sdblist</exec>
            <execArgs>-t all | grep -v "Total" | wc -l</execArgs>
        </setInstallerVariableFromScriptOutput>
        <deleteFile path="${installdir}/tmp_${time}"/>
        <throwError>
            <text>${msg(Upgrade.ErrorMsg.StopProcess)}</text>
            <ruleList>
                <compareValues value1="${process_num}" logic="greater" value2="0"/>
                <compareText logic="does_not_equal" text="${SMS}" value="only"/>
            </ruleList>
        </throwError>
        <throwError>
            <text>${msg(Upgrade.ErrorMsg.StopOMProcess)}</text>
            <ruleList>
                <compareValues value1="${process_om_num}" logic="greater" value2="0"/>
                <compareText logic="does_not_equal" text="${SMS}" value="false"/>
            </ruleList>
        </throwError>
        <consoleWrite text="ok&#xA;"/>
    </readyToInstallActionList>

    <folderList>
        
        <folder>
            <name>files_except_conf</name>
            <actionList>
                <setInstallerVariable name="upgrade_component_done" value="begin"/>
            </actionList>
            <destination>${installdir}</destination>
            <distributionFileList>
                <distributionDirectory>
                    <allowWildcards>1</allowWildcards>
                    <origin>${build_project_directory}/sequoiadb/*</origin>
                    <excludeFiles>*/conf</excludeFiles>
                    </distributionDirectory>
            </distributionFileList>
        </folder>
        <folder>
            <name>limits_files</name>
            <destination>${installdir}/conf</destination>
            <distributionFileList>
                <distributionDirectory>
                    <allowWildcards>1</allowWildcards>
                    <origin>${build_project_directory}/sequoiadb/conf/*</origin>
                    <includeFiles>*/limits.conf</includeFiles>
                </distributionDirectory>
            </distributionFileList>
            <ruleList>
                <fileTest condition="not_exists" path="${installdir}/conf/limits.conf"/>
            </ruleList>
        </folder>
        <folder>
            <name>conf_files</name>
            <destination>${installdir}/conf</destination>
            <distributionFileList>
                <distributionDirectory>
                    <allowWildcards>1</allowWildcards>
                    <origin>${build_project_directory}/sequoiadb/conf/*</origin>
                    <excludeFiles>*/local;*/log;*/sdbcm.conf;*/limits.conf</excludeFiles>
                </distributionDirectory>
            </distributionFileList>
            <actionList>
                <setInstallerVariable name="upgrade_component_done" value="end"/>
            </actionList>
        </folder>
    </folderList>

    <postInstallationActionList>

        <linkPhpLibFunction/>

        <changePermissionOwnerFunction/>

        <!--write md5sum to /etc/default/sequoiadb-->
        <setInstallerVariable name="new_md5sum" value="0000"/>
        <setInstallerVariableFromScriptOutput>
            <exec>md5sum</exec>
            <execArgs>"${installer_pathname}" | cut -c 1-32 </execArgs>
            <name>new_md5sum</name>
        </setInstallerVariableFromScriptOutput>
        <propertiesFileSet>
            <file>${sys_conf_file}</file>
            <key>MD5</key>
            <value>${new_md5sum}</value>
        </propertiesFileSet>

        <!--write upgrade log-->
        <runProgram>
            <program>echo</program>
            <programArguments>'time: ${time}' &gt;&gt; ${installdir}/upgrade.log</programArguments>
        </runProgram>
        <setInstallerVariableFromScriptOutput>
            <name>new_svn</name>
            <exec>${installdir}/bin/sequoiadb</exec>
            <execArgs> --version | grep "Release" | awk '{print $2}'</execArgs>
        </setInstallerVariableFromScriptOutput>
        <setInstallerVariable name="log" value="upgrade from version ${old_version} ${old_edition_full} (release ${old_svn}) to ${new_version} ${new_edition_full} (release ${new_svn})"/>
        <runProgram>
            <program>echo</program>
            <programArguments>'${log}' &gt;&gt; ${installdir}/upgrade.log</programArguments>
        </runProgram>
        <runProgram>
            <program>echo</program>
            <programArguments>' ' &gt;&gt; ${installdir}/upgrade.log</programArguments>
        </runProgram>
        <changeOwnerAndGroup>
            <files>${installdir}/upgrade.log</files>
            <group>${groupname}</group>
            <owner>${username}</owner>
        </changeOwnerAndGroup>

        <!--you should place 'start service' and 'create om' in last of postInstallationActionList-->
        <!--because if this step failed, <postInstallationActionList> will abort and next steps will not be excuted-->
        <getSysType type="sys_type"/>
        <if>
           <conditionRuleList>
              <compareValues value1="${sys_type}" logic="equals" value2="SysV"/>
              <compareValues value1="${exist_old_limits_conf}" logic="equals" value2="false"/>
           </conditionRuleList>
           <actionList>
               <delDefaultService/>
               <addDefaultService/>
           </actionList>
        </if>

        <!--start service-->
        <if>
            <conditionRuleList>
                <compareText logic="does_not_equal" text="${SMS}" value="only"/>
            </conditionRuleList>
            <actionList>
                <startServiceFunction/>
            </actionList>
            <elseActionList>
               <runProgram>
                   <program>${installdir}/bin/sdbcmart</program>
                   <programArguments></programArguments>
                   <abortOnError>0</abortOnError>
                   <showMessageOnError>0</showMessageOnError>
               </runProgram>
            </elseActionList>
        </if>
        
        <runProgram>
            <program>service</program>
            <programArguments> sdbcm status</programArguments>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
        </runProgram>
        <setInstallerVariable name="service_status" value="${program_exit_code}"/>
        <setInstallerVariable name="cm_num" value="-1"/>
        <setInstallerVariableFromScriptOutput>
            <name>cm_num</name>
            <exec>${installdir}/bin/sdblist</exec>
            <execArgs>-t cm | grep -v "Total" | wc -l</execArgs>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
        </setInstallerVariableFromScriptOutput>
        <consoleWrite>
            <text>${msg(Upgrade.WarnMsg.StartProcess)}&#xA;</text>
            <ruleList>
                <compareValues value1="${service_status}" logic="does_not_equal" value2="0"/>
                <compareValues value1="${cm_num}" logic="does_not_equal" value2="2"/>
            </ruleList>
        </consoleWrite>

        <!--start om-->
        <propertiesFileGet>
            <file>${installdir}/conf/sdbcm.conf</file>
            <key>IsGeneral</key>
            <variable>has_om</variable>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
        </propertiesFileGet>
        <setInstallerVariableFromScriptOutput>
            <exec>echo</exec>
            <execArgs>'${has_om}' | sed 's/^\s*//g'</execArgs>
            <name>has_om</name>
        </setInstallerVariableFromScriptOutput>
        <setInstallerVariable name="om_port"    value="11780"/>
        <setInstallerVariable name="om_dbpath"  value="${installdir}/database/sms/${om_port}"/>
        <setInstallerVariable name="http_port"  value="8000"/>

        <setInstallerVariable name="install_om_mode" value="normal"/>
        <setInstallerVariable>
            <name>install_om_mode</name>
            <value>upgrade</value>
            <ruleList>
                <isTrue value="${has_om}"/>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="need_install_om" value="true"/>
        <setInstallerVariable>
            <name>need_install_om</name>
            <value>false</value>
            <ruleList>
                <isFalse value="${has_om}"/>
                <compareText logic="equals" text="${SMS}" value="false"/>
            </ruleList>
        </setInstallerVariable>

        <runProgram>
            <program>${installdir}/install_om.sh</program>
            <programArguments>${install_om_mode} "${installdir}" "${installer_pathname}" ${port} ${om_port} "${om_dbpath}" ${http_port}</programArguments>
            <ruleList>
                <compareText logic="equals" text="${install_om_mode}" value="normal"/>
                <isTrue value="${need_install_om}"/>
            </ruleList>
            <onErrorActionList>
                <consoleWrite text="&#xA;error message:&#xA;${program_stdout}&#xA;"/>
            </onErrorActionList>
        </runProgram>
        <runProgram>
            <program>${installdir}/install_om.sh</program>
            <programArguments>${install_om_mode} "${installdir}" "${installer_pathname}"</programArguments>
            <ruleList>
                <compareText logic="equals" text="${install_om_mode}" value="upgrade"/>
                <isTrue value="${need_install_om}"/>
            </ruleList>
            <onErrorActionList>
                <consoleWrite text="&#xA;error message:&#xA;${program_stdout}&#xA;"/>
            </onErrorActionList>
        </runProgram>
        
        <changeOwnerAndGroup>
            <files>${installdir}/packet;${installdir}/packet/${installerFilename}</files>
            <group>${groupname}</group>
            <owner>${username}</owner>
        </changeOwnerAndGroup>
        <deleteFile path="${installdir}/sdbbp.log"/>
    </postInstallationActionList>

    <installationAbortedActionList>
        <if>
            <conditionRuleList>
                <compareText logic="equals" text="${stage}" value="upgrade"/>
            </conditionRuleList>
            <actionList>
                <consoleWrite text="&#xA;&#xA;${msg(Upgrade.NormalMsg.BeginRollback)}&#xA;"/>

                <!--delete unpack files-->
                <deleteFile path="${installdir}/tmp_${time}"/>

                <!--restore files-->
                <actionGroup>
                    <actionList>
                        <consoleWrite text="${msg(Upgrade.NormalMsg.Rollback.RestoreFile)}"/>
                        <runProgram>
                            <program>cp</program>
                            <programArguments>-rfp ${project.rollbackBackupDirectory}/* /</programArguments>
                        </runProgram>
                        <deleteFile path="${project.rollbackBackupDirectory}"/>
                        <consoleWrite text="ok&#xA;"/>
                    </actionList>
                    <ruleEvaluationLogic>and</ruleEvaluationLogic>
                    <ruleList>
                        <compareText logic="equals" text="${upgrade_component_done}" value="begin"/>
                        <fileTest condition="is_not_empty" path="${project.rollbackBackupDirectory}"/>
                    </ruleList>
                </actionGroup>

                <!--when rollback, restart service-->
                <actionGroup>
                    <actionList>
                        <consoleWrite text="${msg(Upgrade.NormalMsg.Rollbak.StartProcess)}"/>
                        <runProgram>
                            <program>service</program>
                            <programArguments> sdbcm start</programArguments>
                        </runProgram>
                        <runProgram>
                            <program>service</program>
                            <programArguments> sdbcm status</programArguments>
                            <abortOnError>0</abortOnError>
                            <showMessageOnError>0</showMessageOnError>
                        </runProgram>
                        <setInstallerVariable name="service_status" value="${program_exit_code}"/>
                        <consoleWrite>
                            <text>${msg(Upgrade.WarnMsg.StartProcess)}&#xA;</text>
                            <ruleList>
                                <compareValues value1="${service_status}" logic="does_not_equal" value2="0"/>
                            </ruleList>
                        </consoleWrite>
                        <consoleWrite>
                            <text>ok&#xA;</text>
                            <ruleList>
                                <compareValues value1="${service_status}" logic="equals" value2="0"/>
                            </ruleList>
                        </consoleWrite>
                    </actionList>
                    <ruleList>
                        <compareText logic="equals" text="${service_origin_status}" value="0"/>
                    </ruleList>
                </actionGroup>
            </actionList>
        </if>

    </installationAbortedActionList>
</component>







