<project>
    <shortName>sequoiadb</shortName>
    <fullName>SequoiaDB Server</fullName>
    <version>1.0</version>
    <installationType>normal</installationType>
    <overwritePolicy>always</overwritePolicy>

    <customLanguageFileList>
        <language>
            <code>en</code>
            <encoding>utf-8</encoding>
            <file>${build_project_directory}/sequoiadb_en.lng</file>
        </language>
        <language>
            <code>zh_CN</code>
            <encoding>utf-8</encoding>
            <file>${build_project_directory}/sequoiadb_zh.lng</file>
        </language>
    </customLanguageFileList>

    <licenseFileList>
        <licenseFile>
            <code>en</code>
            <file>${build_project_directory}/sequoiadb/license/license_en.txt</file>
        </licenseFile>
        <licenseFile>
            <code>zh_CN</code>
            <encoding>utf-8</encoding>
            <file>${build_project_directory}/sequoiadb/license/license_zh.txt</file>
        </licenseFile>
    </licenseFileList>

    <initializationActionList>
        <setInstallerVariable name="stage" value="main"/>
        <createTimeStamp>
            <variable>time</variable>
            <format>%Y-%m-%d-%H:%M:%S</format>
        </createTimeStamp>
        <setInstallerVariable name="sys_conf_file"      value="/etc/default/sequoiadb"  persist="1"/>
        <setInstallerVariable name="exist_installation" value="false"/>
        <setInstallerVariable name="newsysconf_default" value="/usr/lib/systemd/system" persist="1"/>
        <setInstallerVariable name="newsysconf_ubuntu"  value="/lib/systemd/system"     persist="1"/>
        <setInstallerVariable name="has_om"             value="FALSE"                   persist="1"/>
    </initializationActionList>

    <functionDefinitionList>
        <actionDefinition name="checkUmaskFunction">
            <actionList>
                <setInstallerVariableFromScriptOutput>
                    <name>full_mask</name>
                    <exec>umask</exec>
                </setInstallerVariableFromScriptOutput>
                <setInstallerVariableFromScriptOutput>
                    <name>other_mask</name>
                    <exec>echo</exec>
                    <execArgs>${full_mask} | awk '{print substr($0,length($0)-0,1)}'</execArgs>
                </setInstallerVariableFromScriptOutput>
                <setInstallerVariableFromScriptOutput>
                    <name>group_mask</name>
                    <exec>echo</exec>
                    <execArgs>${full_mask} | awk '{print substr($0,length($0)-1,1)}'</execArgs>
                </setInstallerVariableFromScriptOutput>
                <setInstallerVariableFromScriptOutput>
                    <name>user_mask</name>
                    <exec>echo</exec>
                    <execArgs>${full_mask} | awk '{print substr($0,length($0)-2,1)}'</execArgs>
                </setInstallerVariableFromScriptOutput>
                <showWarning>
                    <text>${msg(Install.WarnMsg.CheckUmask)}</text>
                    <ruleEvaluationLogic>or</ruleEvaluationLogic>
                    <ruleList>
                        <compareValues value1="${other_mask}" logic="greater" value2="2"/>
                        <compareValues value1="${group_mask}" logic="greater" value2="2"/>
                        <compareValues value1="${user_mask}"  logic="greater" value2="0"/>
                    </ruleList>
                </showWarning>
            </actionList>
        </actionDefinition>
        <actionDefinition name="checkFreeDiskSpaceFunction">
            <actionList>
                <throwError>
                    <text>${msg(Install.ErrorMsg.checkDisk.error)}</text>
                    <ruleList>
                        <checkFreeDiskSpace>
                            <logic>less_or_equal</logic>
                            <path>${installdir}</path>
                            <size>1300000</size>
                        </checkFreeDiskSpace>
                    </ruleList>
                </throwError>
            </actionList>
        </actionDefinition>
        <actionDefinition name="checkHostnameIp">
            <actionList>
                <showWarning text="${msg(Install.WarnMsg.checkHostname)}">
                    <ruleEvaluationLogic>or</ruleEvaluationLogic>
                    <ruleList>
                        <compareText text="${machine_hostname}" logic="equals" value="localhost"/>
                        <compareText text="${machine_hostname}" logic="equals" value="(none)"/>
                        <compareTextLength text="${machine_hostname}" logic="equals" length="0"/>
                    </ruleList>
                </showWarning>
                <showWarning text="${msg(Install.WarnMsg.checkHostnameIp)}">
                    <ruleEvaluationLogic>or</ruleEvaluationLogic>
                    <ruleList>
                        <hostValidation>
                            <host>${machine_hostname}</host>
                            <type>hostname</type>
                            <condition>is_not_valid</condition>
                        </hostValidation>
                        <compareText logic="equals" text="${machine_ipaddr}" value="127.0.0.1"/>
                    </ruleList>
                </showWarning>
            </actionList>
        </actionDefinition>
        <actionDefinition name="linkPhpLibFunction">
            <actionList>
                <setInstallerVariable name="php_lib_dir" value="${installdir}/tools/server/php/libxml2/lib"/>
                <createSymLink linkName="${php_lib_dir}/libxml2.so">
                    <target>${php_lib_dir}/libxml2.so.2.9.0</target>
                </createSymLink>
                <runProgram>
                    <program>chown</program>
                    <programArguments>-h ${username}:${groupname} ${php_lib_dir}/libxml2.so</programArguments>
                </runProgram>

                <createSymLink linkName="${php_lib_dir}/libxml2.so.2">
                    <target>${php_lib_dir}/libxml2.so.2.9.0</target>
                </createSymLink>
                <runProgram>
                    <program>chown</program>
                    <programArguments>-h ${username}:${groupname} ${php_lib_dir}/libxml2.so.2</programArguments>
                </runProgram>

                <createSymLink linkName="${php_lib_dir}/libz.so">
                    <target>${php_lib_dir}/libz.so.1.2.5</target>
                </createSymLink>
                <runProgram>
                    <program>chown</program>
                    <programArguments>-h ${username}:${groupname} ${php_lib_dir}/libz.so</programArguments>
                </runProgram>

                <createSymLink linkName="${php_lib_dir}/libz.so.1">
                    <target>${php_lib_dir}/libz.so.1.2.5</target>
                </createSymLink>
                <runProgram>
                    <program>chown</program>
                    <programArguments>-h ${username}:${groupname} ${php_lib_dir}/libz.so.1</programArguments>
                </runProgram>

                <dos2unix files="${installdir}/tools/server/php/bin/php"/>
                <iniFileSet>
                    <file>${installdir}/tools/server/php/lib/php.ini</file>
                    <key>extension_dir</key>
                    <section>PHP</section>
                    <value>${installdir}/lib/phplib</value>
                </iniFileSet>
            </actionList>
        </actionDefinition>
        <actionDefinition name="changePermissionOwnerFunction">
            <actionList>
                <changePermissions permissions="0755" files="${installdir}/bin/{*,*/*}"/>
                <changePermissions permissions="0755" files="${installdir}/plugins/SequoiaSQL/bin/*.sh"/>
                <changePermissions permissions="0755" files="${installdir}/tools/server/php/bin/*"/>
                <changePermissions permissions="0755" files="${installdir}/www/shell/*"/>
                <changePermissions permissions="0755" files="${installdir}/install_om.sh"/>
                <changePermissions permissions="0755" files="${installdir}/compatible.sh"/>
                <changePermissions permissions="0755" files="${installdir}/conf/script/{*.sh,*/*.sh}"/>
                <changePermissions permissions="0755" files="${installdir}/java/jdk/bin/*"/>
                <changePermissions permissions="0755" files="${installdir}/postgresql/*.so*"/>
                <changePermissions permissions="0777" files="/tmp"/>
                <changePermissions permissions="0777" files="/tmp/sequoiadb">
                    <ruleList>
                        <fileExists path="/tmp/sequoiadb"/>
                    </ruleList>
                </changePermissions>
                <changeOwnerAndGroup><!--root owner should be set before suid -->
                    <files>${installdir}/bin/sdbomtool</files>
                    <group>root</group>
                    <owner>root</owner>
                </changeOwnerAndGroup>
                <changePermissions permissions="6755" files="${installdir}/bin/sdbomtool"/>
                
                <runProgram>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                    <program>setcap</program>
                    <programArguments>'CAP_SYS_RESOURCE=+ep' ${installdir}/bin/sdbstart</programArguments>
                </runProgram>
                <runProgram>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                    <program>setcap</program>
                    <programArguments>'CAP_SYS_RESOURCE=+ep' ${installdir}/bin/sdbcmart</programArguments>
                </runProgram>
                
                <if>
                    <conditionRuleList>
                        <fileExists path="${installdir}/doc/index.html"/>
                    </conditionRuleList>
                    <actionList>
                        <runProgram>
                            <program>rm</program>
                            <programArguments>-f ${installdir}/www/doc</programArguments>
                        </runProgram>
                        <createSymLink linkName="${installdir}/www/doc" target="${installdir}/doc"/>
                        <runProgram>
                            <program>chown</program>
                            <programArguments>-h ${username}:${groupname} ${installdir}/www/doc</programArguments>
                        </runProgram>
                    </actionList>
                </if>

                <changeOwnerAndGroup>
                    <files>${project.rollbackBackupDirectory};${installdir}/rollback</files>
                    <group>${groupname}</group>
                    <owner>${username}</owner>
                </changeOwnerAndGroup>

                <runProgram>
                    <program>mkdir</program>
                    <programArguments>-p /var/sequoiadb</programArguments>
                </runProgram>
                <changeOwnerAndGroup>
                    <files>/var/sequoiadb</files>
                    <group>${groupname}</group>
                    <owner>${username}</owner>
                </changeOwnerAndGroup>
                <changePermissions permissions="0777" files="/var/sequoiadb"/>
            </actionList>
        </actionDefinition>
        <actionDefinition name="startServiceFunction">
            <actionList>
                <runProgram><!--in case did not reload /etc/init.d/sdbcm -->
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                    <program>systemctl</program>
                    <programArguments>daemon-reload</programArguments>
                </runProgram>
                <runProgram>
                    <customErrorMessage>${msg(Install.ErrorMsg.StartCM.error)}</customErrorMessage>
                    <program>service</program>
                    <programArguments>sdbcm start</programArguments>
                    <onErrorActionList>
                        <consoleWrite text="&#xA;error message:&#xA;${program_stdout}&#xA;"/>
                    </onErrorActionList>
                </runProgram>
            </actionList>
        </actionDefinition>
        <actionDefinition name="deleteEnv">
            <actionList>
                <!--delete export line-->
                <setInstallerVariableFromScriptOutput>
                    <exec>grep</exec>
                    <execArgs>-n "^export PATH=\"\$PATH:${installdir}\/bin\"$" ${envFile} | awk -F ":" '{print $1}'</execArgs>
                    <name>line_num1</name>
                </setInstallerVariableFromScriptOutput>
                <runProgram>
                    <program>sed</program>
                    <programArguments>-i '${line_num1}d' ${envFile}</programArguments>
                    <ruleList>
                        <compareValues value1="${line_num1}" logic="greater" value2="0"/>
                    </ruleList>
                </runProgram>
                <setInstallerVariableFromScriptOutput>
                    <exec>grep</exec>
                    <execArgs>-n "^export LD_LIBRARY_PATH=\"\$LD_LIBRARY_PATH:${installdir}\/lib\"$" ${envFile} | awk -F ":" '{print $1}'</execArgs>
                    <name>line_num2</name>
                </setInstallerVariableFromScriptOutput>
                <runProgram>
                    <program>sed</program>
                    <programArguments>-i '${line_num2}d' ${envFile}</programArguments>
                    <ruleList>
                        <compareValues value1="${line_num2}" logic="greater" value2="0"/>
                    </ruleList>
                </runProgram>
                <!--delete empty file-->
                <runProgram>
                    <program>test</program>
                    <programArguments>-s ${envFile}</programArguments>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                    <onErrorActionList>
                        <deleteFile path="${envFile}"/>
                    </onErrorActionList>
                </runProgram>
            </actionList>
            <parameterList>
                <stringParameter name="envFile" value="" default=""/>
            </parameterList>
        </actionDefinition>
        <actionDefinition name="addEnv">
            <actionList>
                <runProgram>
                    <program>grep</program>
                    <programArguments>-q "^export PATH=\"\$PATH:${installdir}\/bin\"$" ${envFile}</programArguments> 
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
                <runProgram>
                    <abortOnError>0</abortOnError>
                    <program>echo</program>
                    <programArguments>"export PATH=\"\$PATH:${installdir}/bin\"" &gt;&gt; ${envFile}</programArguments>
                    <ruleList>
                        <compareText logic="does_not_equal" text="${program_exit_code}" value="0"/>
                    </ruleList>
                </runProgram>
                <runProgram>
                    <program>grep</program>
                    <programArguments>-q "^export LD_LIBRARY_PATH=\"\$LD_LIBRARY_PATH:${installdir}\/lib\"$" ${envFile}</programArguments> 
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
                <runProgram>
                    <abortOnError>0</abortOnError>
                    <program>echo</program>
                    <programArguments>"export LD_LIBRARY_PATH=\"\$LD_LIBRARY_PATH:${installdir}/lib\"" &gt;&gt; ${envFile}</programArguments>
                    <ruleList>
                        <compareText logic="does_not_equal" text="${program_exit_code}" value="0"/>
                    </ruleList>
                </runProgram>
            </actionList>
            <parameterList>
                <stringParameter name="envFile" value="" default=""/>
            </parameterList>
        </actionDefinition>
        <actionDefinition name="getSysType">
            <actionList>
                <getSymLinkTarget variable="pid1_fullpath">
                    <link>/proc/1/exe</link>
                </getSymLinkTarget>
                <setInstallerVariableFromRegEx>
                    <name>pid1_exe</name>
                    <pattern>(.*)/(.*)</pattern>
                    <substitution>\2</substitution>
                    <text>${pid1_fullpath}</text>
                </setInstallerVariableFromRegEx>
                <globalVariables names="${type}"/>
                <setInstallerVariable name="${type}" value="unknown"/>
                <setInstallerVariable name="${type}" value="SysV">
                    <ruleList>
                        <compareValues value1="${pid1_exe}" logic="equals" value2="init"/>
                    </ruleList>
                </setInstallerVariable>
                <setInstallerVariable name="${type}" value="systemd">
                    <ruleList>
                        <compareValues value1="${pid1_exe}" logic="equals" value2="systemd"/>
                    </ruleList>
                </setInstallerVariable>
            </actionList>
                <parameterList>
                    <stringParameter name="type" value="" default=""/>
                </parameterList>
        </actionDefinition>
        <actionDefinition name="addDefaultService">
            <actionList>
                <addUnixService>
                    <customErrorMessage>${msg(Install.ErrorMsg.CreateLinuxService.error)}</customErrorMessage>
                    <name>sdbcm</name>
                    <program>${installdir}/sequoiadb</program>
                </addUnixService>
                <deleteFile path="${installdir}/sdbcm.service"/>
            </actionList>
        </actionDefinition>
        <actionDefinition name="delDefaultService">
            <actionList>
                <removeUnixService name="sdbcm"/>
            </actionList>
        </actionDefinition>
        <actionDefinition name="addSystemdService">
            <actionList>
                <substitute>
                    <files>${installdir}/sdbcm.service</files>
                    <type>exact</type>
                    <substitutionList>
                        <substitution pattern="/opt/sequoiadb" value="${installdir}"/>
                    </substitutionList>
                </substitute>
                <copyFile origin="${installdir}/sdbcm.service">
                    <destination>${newsysconf_default}/sdbcm.service</destination>
                    <ruleList>
                        <fileTest condition="is_not_empty" path="${newsysconf_default}"/>
                    </ruleList>
                </copyFile>
                <copyFile origin="${installdir}/sdbcm.service">
                    <destination>${newsysconf_ubuntu}/sdbcm.service</destination>
                    <ruleList>
                        <fileTest condition="is_not_empty" path="${newsysconf_ubuntu}"/>
                    </ruleList>
                </copyFile>
                <deleteFile path="${installdir}/sdbcm.service"/>
                <runProgram>
                    <program>systemctl</program>
                    <programArguments>daemon-reload</programArguments>
                    <customErrorMessage>${msg(Install.ErrorMsg.SystemctlReload)}</customErrorMessage>
                </runProgram>
                <runProgram>
                    <program>systemctl</program>
                    <programArguments>enable sdbcm.service</programArguments>
                    <customErrorMessage>${msg(Install.ErrorMsg.CreateLinuxService.error)}</customErrorMessage>
                </runProgram>
            </actionList>
        </actionDefinition>
        <actionDefinition name="delSystemdService">
            <actionList>
                <runProgram>
                    <program>systemctl</program>
                    <programArguments>disable sdbcm.service</programArguments>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
                <deleteFile path="${newsysconf_default}/sdbcm.service"/>
                <deleteFile path="${newsysconf_ubuntu}/sdbcm.service"/>
                <runProgram>
                    <program>systemctl</program>
                    <programArguments>daemon-reload</programArguments>
                    <customErrorMessage>${msg(Install.ErrorMsg.SystemctlReload)}</customErrorMessage>
                </runProgram>
            </actionList>
        </actionDefinition>
    
        <actionDefinition name="stopOM">
           <actionList>
              <runProgram>
                  <program>${installdir}/bin/sdbstop</program>
                  <programArguments>-t om -r om</programArguments>
                  <runAs>${username}</runAs>
                  <abortOnError>0</abortOnError>
                  <showMessageOnError>0</showMessageOnError>
              </runProgram>
           </actionList>
        </actionDefinition>
    </functionDefinitionList>

    <!--exist installation? different mode has different parameterList-->
    <preInstallationActionList>
        <!-- parameter check -->
        <throwError>
            <text>${msg(Upgrade.Paramers.Upgrade.Check)}</text>
            <ruleEvaluationLogic>and</ruleEvaluationLogic>
            <ruleList>
                <compareText logic="does_not_equal" text="${upgrade_param}" value="true"/>
                <compareText logic="does_not_equal" text="${upgrade_param}" value="false"/>
            </ruleList>
        </throwError>
        <throwError>
            <text>${msg(Install.Paramers.SMS.Check)}</text>
            <ruleEvaluationLogic>and</ruleEvaluationLogic>
            <ruleList>
                <compareText logic="does_not_equal" text="${SMS}" value="true"/>
                <compareText logic="does_not_equal" text="${SMS}" value="false"/>
                <compareText logic="does_not_equal" text="${SMS}" value="only"/>
            </ruleList>
        </throwError>
        <throwError>
            <text>${msg(Install.Paramers.Force.Check)}</text>
            <ruleEvaluationLogic>and</ruleEvaluationLogic>
            <ruleList>
                <compareText logic="does_not_equal" text="${force}" value="true"/>
                <compareText logic="does_not_equal" text="${force}" value="false"/>
            </ruleList>
        </throwError>
        <throwError>
            <text>${msg(Install.Paramers.ProcessAutoStart.Check)}</text>
            <ruleEvaluationLogic>and</ruleEvaluationLogic>
            <ruleList>
                <compareText logic="does_not_equal" text="${processAutoStart}" value="true"/>
                <compareText logic="does_not_equal" text="${processAutoStart}" value="false"/>
            </ruleList>
        </throwError>

        <!--parameter passed in command line, should not ask again in dialog-->
        <setInstallerVariable name="parameter(force).ask" value="0">
            <ruleList>
                <compareText text="${installer_command_line_arguments}" value="--force" logic="contains"/>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="parameter(installdir).ask" value="0">
            <ruleList>
                <compareText text="${installer_command_line_arguments}" value="--installmode" logic="contains"/>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="parameter(installdir).ask" value="0">
            <ruleList>
                <compareText text="${installer_command_line_arguments}" value="--prefix" logic="contains"/>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="parameter(user_data).parameter(username).ask" value="0">
            <ruleList>
                <compareText text="${installer_command_line_arguments}" value="--username" logic="contains"/>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="parameter(user_data).parameter(groupname).ask" value="0">
            <ruleList>
                <compareText text="${installer_command_line_arguments}" value="--groupname" logic="contains"/>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="parameter(user_data).parameter(userpasswd).ask" value="0">
            <ruleList>
                <compareText text="${installer_command_line_arguments}" value="--userpasswd" logic="contains"/>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="parameter(port).ask" value="0">
            <ruleList>
                <compareText text="${installer_command_line_arguments}" value="--port" logic="contains"/>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="parameter(processAutoStart).ask" value="0">
            <ruleList>
                <compareText text="${installer_command_line_arguments}" value="--processAutoStart" logic="contains"/>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="parameter(SMS).ask" value="0">
            <ruleList>
                <compareText text="${installer_command_line_arguments}" value="--SMS" logic="contains"/>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="parameter(user_data).ask" value="0">
            <ruleEvaluationLogic>and</ruleEvaluationLogic>
            <ruleList>
                <compareText text="${installer_command_line_arguments}" value="--username"   logic="contains"/>
                <compareText text="${installer_command_line_arguments}" value="--groupname"  logic="contains"/>
                <compareText text="${installer_command_line_arguments}" value="--userpasswd" logic="contains"/>
            </ruleList>
        </setInstallerVariable>

        <!--check old version of sequoiadb exists or not-->
        <changePermissions><!--make sure permission is 644-->
            <files>${sys_conf_file}</files>
            <permissions>0644</permissions>
            <ruleList>
                <fileExists path="${sys_conf_file}"/>
            </ruleList>
        </changePermissions>
        <propertiesFileGet>
            <file>${sys_conf_file}</file>
            <key>INSTALL_DIR</key>
            <variable>installdir_inconf</variable>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
        </propertiesFileGet>
        <setInstallerVariable name="exist_installation" value="true">
            <ruleEvaluationLogic>and</ruleEvaluationLogic>
            <ruleList>
                 <compareTextLength text="${installdir_inconf}" logic="greater" length="0"/>
                 <fileTest condition="exists"       path="${installdir_inconf}"/>
                 <fileTest condition="is_not_empty" path="${installdir_inconf}"/>
            </ruleList>
        </setInstallerVariable>
        
    </preInstallationActionList>

    <parameterList>
        <!--keep variable in both running time and building time-->
        <stringParameter name="enterpriseversion" ask="0" value=""/>
        <stringParameter name="platform"          ask="0" value=""/>
        
        <choiceParameter name="need_read_license">
            <ruleList>
                <compareValues value1="${installer_ui}" logic="equals" value2="text"/>
            </ruleList>
            <insertBefore>full_license</insertBefore>
            <default>false</default>
            <cliOptionShow>0</cliOptionShow>
            <explanation></explanation>
            <description>${msg(Install.Paramers.LicenseRead.License${enterpriseversion}.Information.Part)}</description>
            <optionList>
                <option>
                    <text>${msg(Install.Paramers.LicenseRead.Agree.Description)}</text>
                    <value>false</value>
                    <description>${msg(Install.Paramers.LicenseRead.Agree.Explanation)}</description>
                </option>
                <option>
                    <text>${msg(Install.Paramers.LicenseRead.Read.Description)}</text>
                    <value>true</value>
                </option>
            </optionList>
        </choiceParameter>

        <licenseParameter name="full_license">
            <ruleEvaluationLogic>or</ruleEvaluationLogic>
            <ruleList>
                <compareValues value1="${installer_ui}" logic="does_not_equal" value2="text"/>
                <ruleGroup ruleEvaluationLogic="and">
                    <ruleList>
                        <compareValues value1="${installer_ui}" logic="equals" value2="text"/>
                        <isTrue value="${need_read_license}"/>
                    </ruleList>
                </ruleGroup>
            </ruleList>
            <title>License Agreement</title>
            <description>${msg(Install.Paramers.LicenseRead.Read.Description)}</description>
            <explanation></explanation>
            <file>${build_project_directory}/sequoiadb/license/license_en.txt</file>
            <licenseFileList>
                <licenseFile>
                    <code>zh_CN</code>
                    <encoding>utf-8</encoding>
                    <file>${build_project_directory}/sequoiadb/license/license_zh.txt</file>
                </licenseFile>
            </licenseFileList>
        </licenseParameter>

        <!--normal mode parameter-->
        <directoryParameter name="installdir">
            <insertAfter>full_license</insertAfter>
            <description>Installer.Parameter.installdir.description</description>
            <explanation>Installer.Parameter.installdir.explanation</explanation>
            <value></value>
            <default>${platform_install_prefix}/${product_shortname}</default>
            <allowEmptyValue>0</allowEmptyValue>
            <ask>yes</ask>
            <cliOptionName>prefix</cliOptionName>
            <mustBeWritable>yes</mustBeWritable>
            <mustExist>0</mustExist>
            <width>40</width>
        </directoryParameter>

        <choiceParameter name="installmode">
            <insertAfter>installdir</insertAfter>
            <value></value>
            <default></default>
            <cliOptionText>${msg(Upgrade.Paramers.Upgrade.Explanation)}</cliOptionText>
            <cliOptionName>installmode</cliOptionName>
            <description>${msg(Install.Parameter.Upgrade.description)}</description>
            <explanation>${msg(Install.Parameter.Upgrade.explanation)}</explanation>
            <optionList>
                <option>
                    <text>upgrade</text>
                    <value>upgrade</value>
                </option>
                <option>
                    <text>cover</text>
                    <value>cover</value>
                </option>
            </optionList>
            <ruleList>
                <compareText text="${installer_command_line_arguments}" value="--installmode" logic="does_not_contain"/>
                <isTrue value="${exist_installation}"/>
            </ruleList>
        </choiceParameter>

        <booleanParameter name="upgrade_param">
            <insertAfter>installmode</insertAfter>
            <value></value>
            <default>false</default>
            <cliOptionName>upgrade</cliOptionName>
            <cliOptionShow>0</cliOptionShow>
            <ruleList>
                <compareValues value1="1" value2="2" logic="equals"/>
            </ruleList>
        </booleanParameter>

        <booleanParameter name="force">
            <insertAfter>upgrade_param</insertAfter>
            <value></value>
            <default>false</default>
            <cliOptionName>force</cliOptionName>
            <cliOptionText>${msg(Install.Paramers.Force.Description)}</cliOptionText>
            <explanation>${msg(Install.Paramers.Force.Explanation)}</explanation>
            <description>${msg(Install.Paramers.Force.Description)}</description>
        </booleanParameter>

        <parameterGroup name="user_data">
            <insertAfter>force</insertAfter>
            <title>${msg(Install.Paramers.user.title)}</title>
            <explanation>${msg(Install.Paramers.user.explanation)}</explanation>
            <value></value>
            <default></default>
            <parameterList>
                <stringParameter>
                    <name>username</name>
                    <description>${msg(Install.Paramers.user.username.description)}</description>
                    <explanation></explanation>
                    <value>sdbadmin</value>
                    <default>sdbadmin</default>
                    <allowEmptyValue>0</allowEmptyValue>
                    <width>40</width>
                </stringParameter>
                <stringParameter>
                    <name>groupname</name>
                    <description>${msg(Install.Paramers.user.groupname.description)}</description>
                    <explanation></explanation>
                    <value>${username}_group</value>
                    <default>${username}_group</default>
                    <allowEmptyValue>0</allowEmptyValue>
                    <width>40</width>
                </stringParameter>
                <passwordParameter>
                    <name>userpasswd</name>
                    <description>${msg(Install.Paramers.user.password.description)}</description>
                    <explanation></explanation>
                    <value></value>
                    <default>${username}</default>
                    <allowEmptyValue>0</allowEmptyValue>
                    <descriptionRetype>${msg(Install.Paramers.user.reentry_password.description)}</descriptionRetype>
                    <width>20</width>
                    <validationActionList>
                        <throwError>
                            <text>${msg(Install.Paramers.user.password.error)}</text>
                            <ruleList>
                                <compareText logic="equals" text="${userpasswd}" value=""/>
                            </ruleList>
                        </throwError>
                    </validationActionList>
                </passwordParameter>
            </parameterList>
            <ruleList>
                <compareValues value1="${installmode}" value2="upgrade" logic="does_not_equal"/>
            </ruleList>
        </parameterGroup>
        <stringParameter name="port">
            <insertAfter>user_data</insertAfter>
            <title>${msg(Install.Paramers.port.title)}</title>
            <description>${msg(Install.Paramers.port.Description)}</description>
            <explanation>${msg(Install.Paramers.port.explanation)}</explanation>
            <value>11790</value>
            <default>11790</default>
            <allowEmptyValue>1</allowEmptyValue>
            <width>40</width>
            <ruleList>
                <compareValues value1="${installmode}" value2="upgrade" logic="does_not_equal"/>
            </ruleList>
        </stringParameter>
        <booleanParameter name="processAutoStart">
            <insertAfter>port</insertAfter>
            <description>${msg(Install.Paramers.processAutoStart.Description)}</description>
            <explanation>${msg(Install.Paramers.processAutoStart.explanation)}</explanation>
            <value></value>
            <default>true</default>
            <cliOptionText>${msg(Install.Paramers.processAutoStart.explanation)}</cliOptionText>
            <ruleList>
                <compareValues value1="${installmode}" value2="upgrade" logic="does_not_equal"/>
            </ruleList>
        </booleanParameter>
        <choiceParameter name="SMS">
            <insertAfter>processAutoStart</insertAfter>
            <description>${msg(Install.Paramers.sms.description)}</description>
            <value></value>
            <default>false</default>
            <cliOptionName>SMS</cliOptionName>
            <cliOptionText>${msg(Install.Paramers.sms.explanation)}</cliOptionText>
            <optionList>
                <option>
                    <text>true</text>
                    <value>true</value>
                </option>
                <option>
                    <text>false</text>
                    <value>false</value>
                </option>
                <option>
                    <text>only</text>
                    <value>only</value>
                </option>
            </optionList>
            <!--ruleList>
                <compareValues value1="${installmode}" value2="upgrade" logic="does_not_equal"/>
            </ruleList-->
        </choiceParameter>

    </parameterList>

    <!--select compoment, and check environment-->
    <readyToInstallActionList>
        <setInstallerVariable name="project.rollbackBackupDirectory" value="${installdir}/rollback/BackupDir_${time}"/>

        <throwError>
            <text>${msg(Install.ErrorMsg.CheckInstallmodeAndUpgrade.error)}</text>
            <ruleList>
                <compareText text="${installer_command_line_arguments}" value="--upgrade" logic="contains"/>
                <compareText text="${installer_command_line_arguments}" value="--installmode" logic="contains"/>
            </ruleList>
        </throwError>
        <setInstallerVariable name="project.installationType" value="upgrade">
            <ruleEvaluationLogic>or</ruleEvaluationLogic>
            <ruleList>
                <compareValues value1="${upgrade_param}" logic="equals" value2="true"/>
                <compareValues value1="${installmode}" logic="equals" value2="upgrade"/>
                <ruleGroup>
                    <ruleList>
                        <compareText text="${installer_command_line_arguments}" value="--installmode" logic="does_not_contain"/>
                        <compareText text="${installer_command_line_arguments}" value="--upgrade" logic="does_not_contain"/>
                        <isTrue value="${exist_installation}"/>
                        <compareText>
                            <text>${installer_interactivity}</text>
                            <logic>does_not_contain</logic>
                            <value>normal</value>
                        </compareText>
                    </ruleList>
                </ruleGroup>
            </ruleList>
        </setInstallerVariable>

        <!--select component-->
        <componentSelection>
            <select>upgrade_component</select>
            <deselect>normal_component</deselect>
            <ruleList>
                <compareValues value1="${project.installationType}" value2="upgrade" logic="equals"/>
            </ruleList>
        </componentSelection>
        <componentSelection>
            <select>normal_component</select>
            <deselect>upgrade_component</deselect>
            <ruleList>
                <compareValues value1="${project.installationType}" value2="normal" logic="equals"/>
            </ruleList>
        </componentSelection>

    </readyToInstallActionList>

    <componentList>
        <include file="upgrade_component.xml" />
        <include file="normal_component.xml" />
    </componentList>

    <preUninstallationActionList>
        <!--stop process-->
        <runProgram>
            <program>service</program>
            <programArguments>sdbcm stop</programArguments>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
        </runProgram>
        <runProgram>
            <program>${installdir}/bin/sdbcmtop</program>
            <programArguments></programArguments>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
        </runProgram>
        <runProgram>
            <program>${installdir}/bin/sdbstop</program>
            <programArguments>-t all</programArguments>
            <runAs>${username}</runAs>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
        </runProgram>

        <!--check process has been stoped or not-->
        <setInstallerVariable name="process_num" value="-1"/>
        <setInstallerVariableFromScriptOutput>
            <name>process_num</name>
            <exec>${installdir}/bin/sdblist</exec>
            <execArgs>-t all | grep -v "Total" | wc -l</execArgs>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
        </setInstallerVariableFromScriptOutput>
        <if>
            <conditionRuleList>
                 <compareValues value1="${process_num}" logic="greater" value2="0"/>
            </conditionRuleList>
            <actionList>
                <consoleWrite text="&#xA;${msg(Uninstall.ErrorMsg.CheckProcess)}&#xA;"/>
                <exit exitCode="1"/><!--exit uninstallation-->
            </actionList>
        </if>
    </preUninstallationActionList>

    <postUninstallationActionList>
        <!--remove service-->
        <getSysType type="sys_type"/>
        <if>
            <conditionRuleList>
                <compareValues value1="${sys_type}" logic="equals" value2="systemd"/>
            </conditionRuleList>
            <actionList>
                <delSystemdService/>
            </actionList>
            <elseActionList>
                <delDefaultService/>
            </elseActionList>
        </if>

        <!--delete file-->
        <deleteFile path="${installdir}/packet/${installerFilename}"/>
        <deleteFile path="${sys_conf_file}"/>
        
        <!--delete environment-->
        <deleteEnv envFile="~${username}/.bashrc"/>
        <deleteEnv envFile="~${username}/.profile"/>
        <deleteEnv envFile="~${username}/.bash_profile"/>
    </postUninstallationActionList>

    <installerFilename>${product_shortname}-${product_version}-${platform}${enterpriseversion}-installer.${platform_exec_suffix}</installerFilename>
    <allowLanguageSelection>1</allowLanguageSelection>
    <allowedLanguages>en zh_CN</allowedLanguages>
    <debuggerPassword>sequoiadb</debuggerPassword>
    <enableDebugger>1</enableDebugger>
    <defaultUnixGroup>${groupname}</defaultUnixGroup>
    <defaultUnixOwner>${username}</defaultUnixOwner>
    <enableRollback>1</enableRollback>
    <enableTimestamp>1</enableTimestamp>
    <requireInstallationByRootUser>1</requireInstallationByRootUser>
    <saveRelativePaths>1</saveRelativePaths>
    <singleInstanceCheck>1</singleInstanceCheck>
    <vendor>SequoiaDB</vendor>

</project>

