<component>
    <name>normal_component</name>

    <initializationActionList>
        <setInstallerVariable name="stage" value="normal"/>
        <setInstallerVariable name="add_user_done"      value="false"/>
        <setInstallerVariable name="add_group_done"     value="false"/>
        <setInstallerVariable name="add_service_done"   value="false"/>
        <setInstallerVariable name="add_sysconf_done"   value="false"/>
    </initializationActionList>

    <readyToInstallActionList>
        <!--check disk-->
        <checkFreeDiskSpaceFunction/>

        <!--check hostname and ip-->
        <checkHostnameIp/>

        <!--check umask-->
        <checkUmaskFunction/>

        <!--check process has been stoped or not-->
        <createDirectory path="${installdir}/tmp_${time}"/>
        <unpackFile>
           <component>normal_component</component>
           <folder>files</folder>
           <origin>bin/sdblist</origin>
           <destination>${installdir}/tmp_${time}</destination>
        </unpackFile>
        <changePermissions files="${installdir}/tmp_${time}/sdblist" permissions="0755"/>
        <if>
            <conditionRuleList>
                <isTrue value="${force}"/>
            </conditionRuleList>
            <actionList>
                <runProgram>
                    <program>service</program>
                    <programArguments> sdbcm stop</programArguments>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
                <runProgram>
                    <program>${installdir}/tmp_${time}/sdblist</program>
                    <programArguments>-t all | grep -v "Total" | awk '{print $2}' | awk -F '(' '{print $2}' | awk -F ')' '{print "kill -9 " $1}' | bash</programArguments>
                </runProgram>
            </actionList>
        </if>
        <setInstallerVariableFromScriptOutput>
            <name>process_num</name>
            <exec>${installdir}/tmp_${time}/sdblist</exec>
            <execArgs>-t all | grep -v "Total" | wc -l</execArgs>
        </setInstallerVariableFromScriptOutput>
        <!--stop om  and  omplugin-->
        <if>
            <conditionRuleList>
                <compareText logic="does_not_equal" text="${SMS}" value="false"/>
                <compareText logic="equals" text="${installmode}" value="cover"/>
            </conditionRuleList>
            <actionList>
               <stopOM/>
               <runProgram>
                   <program>${installdir}/bin/sdbcmtop</program>
                   <programArguments></programArguments>
                   <abortOnError>0</abortOnError>
                   <showMessageOnError>0</showMessageOnError>
               </runProgram>
            </actionList>
        </if>
        
        <!--check om and om plugin-->
        <setInstallerVariableFromScriptOutput>
            <name>process_om_num</name>
            <exec>${installdir}/tmp_${time}/sdblist</exec>
            <execArgs>-t om | grep -v "Total" | wc -l</execArgs>
        </setInstallerVariableFromScriptOutput>
        
        <deleteFile path="${installdir}/tmp_${time}"/>
        
        <throwError>
            <text>${msg(Upgrade.ErrorMsg.StopProcess)}</text>
            <ruleList>
                <compareValues value1="${process_num}" logic="greater" value2="0"/>
                <compareText logic="does_not_equal" text="${SMS}" value="only"/>
            </ruleList>
        </throwError>
        <throwError>
            <text>${msg(Upgrade.ErrorMsg.StopOMProcess)}</text>
            <ruleList>
                <compareValues value1="${process_om_num}" logic="greater" value2="0"/>
                <compareText logic="does_not_equal" text="${SMS}" value="false"/>
            </ruleList>
        </throwError>

        <!--check or create user group-->
        <throwError>
            <text>The ROOT user is not allowed to create.</text>
            <ruleList>
                <compareValues>
                    <logic>equals</logic>
                    <value1>${username}</value1>
                    <value2>root</value2>
                </compareValues>
            </ruleList>
        </throwError>

        <setInstallerVariable name="exist_user" value="false"/>
        <setInstallerVariable>
            <name>exist_user</name>
            <value>true</value>
            <ruleList>
                <userTest logic="exists" username="${username}"/>
            </ruleList>
        </setInstallerVariable>

        <setInstallerVariable name="exist_group" value="false"/>
        <runProgram>
            <program>grep</program>
            <programArguments>"^$groupname:" /etc/group</programArguments>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
        </runProgram>
        <setInstallerVariable name="exist_group" value="true">
             <ruleList>
                 <compareText logic="equals" text="${program_exit_code}" value="0"/>
             </ruleList>
        </setInstallerVariable>


        <actionGroup>
            <ruleList>
                <isTrue value="${exist_user}"/>
            </ruleList>
            <actionList>
                <setInstallerVariableFromScriptOutput>
                    <name>actual_group</name>
                    <exec>id</exec>
                    <execArgs>-ng ${username}</execArgs>
                </setInstallerVariableFromScriptOutput>
                <throwError>
                    <text>${msg(Install.ErrorMsg.CheckGroup)}</text>
                    <ruleList>
                        <compareValues value1="${actual_group}" logic="does_not_equal" value2="${groupname}"/>
                    </ruleList>
                </throwError>
                <createDirectory path="~${username}"/>
            </actionList>
        </actionGroup>

        <actionGroup>
            <ruleList>
                <isFalse value="${exist_user}"/>
            </ruleList>
            <actionList>
                <addGroup> <!--if group exists, <addGroup> will not throw error-->
                    <customErrorMessage>${msg(Install.ErrorMsg.CreateGroup)}</customErrorMessage>
                    <groupname>${groupname}</groupname>
                </addGroup>
                <setInstallerVariable name="add_group_done" value="true">
                     <ruleEvaluationLogic>and</ruleEvaluationLogic>
                     <ruleList>
                         <isTrue value="${exist_group}"/>
                         <compareText logic="equals" text="${program_exit_code}" value="0"/>
                     </ruleList>
                </setInstallerVariable>
                <runProgram>
                    <customErrorMessage>${msg(Install.ErrorMsg.CreateUser)}</customErrorMessage>
                    <program>useradd</program>
                    <programArguments>${username} -m -p ${userpasswd} -g ${groupname}  -s /bin/bash </programArguments>
                </runProgram>
                <setInstallerVariable name="add_user_done" value="true">
                     <ruleList>
                         <compareText logic="equals" text="${program_exit_code}" value="0"/>
                     </ruleList>
                </setInstallerVariable>
            </actionList>
        </actionGroup>

        <runProgram>
            <program>echo</program>
            <programArguments> ${username}:${userpasswd} | chpasswd</programArguments>
        </runProgram>
        <propertiesFileGet>
            <file>${installdir}/conf/sdbcm.conf</file>
            <key>IsGeneral</key>
            <variable>has_om</variable>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
        </propertiesFileGet>
        <setInstallerVariableFromScriptOutput>
            <exec>echo</exec>
            <execArgs>'${has_om}' | sed 's/^\s*//g'</execArgs>
            <name>has_om</name>
        </setInstallerVariableFromScriptOutput>
        <propertiesFileGet>
            <file>${installdir}/conf/sdbcm.conf</file>
            <key>IsGeneral</key>
            <variable>IsGeneral</variable>
            <ruleList>
               <isTrue value="${has_om}"/>
            </ruleList>
        </propertiesFileGet>
        <propertiesFileGet>
            <file>${installdir}/conf/sdbcm.conf</file>
            <key>OMAddress</key>
            <variable>OMAddress</variable>
            <ruleList>
               <isTrue value="${has_om}"/>
            </ruleList>
        </propertiesFileGet>
    </readyToInstallActionList>

    <folderList>
        <folder>
            <name>files</name>
            <destination>${installdir}</destination>
            <distributionFileList>
                <distributionDirectory>
                    <allowWildcards>1</allowWildcards>
                    <origin>${build_project_directory}/sequoiadb/*</origin>
                </distributionDirectory>
            </distributionFileList>
        </folder>
    </folderList>

    <postInstallationActionList>

        <linkPhpLibFunction/>

        <changePermissionOwnerFunction/>

        <!--modify tcp-->
        <runProgram>
            <abortOnError>0</abortOnError>
            <program>echo</program>
            <programArguments>3 &gt; /proc/sys/net/ipv4/tcp_retries2</programArguments>
            <ruleList>
                <fileExists>
                    <path>/proc/sys/net/ipv4/tcp_retries2</path>
                </fileExists>
            </ruleList>
        </runProgram>

        <!--write /etc/default/sequoiadb-->
        <deleteFile path="${sys_conf_file}"/>
        <touchFile path="${sys_conf_file}"/>
        <setInstallerVariable name="add_sysconf_done" value="true">
             <ruleList>
                 <compareText logic="equals" text="${program_exit_code}" value="0"/>
             </ruleList>
        </setInstallerVariable>
        <changeOwnerAndGroup>
            <files>${sys_conf_file}</files>
            <group>${groupname}</group>
            <owner>${username}</owner>
        </changeOwnerAndGroup>
        <changePermissions files="${sys_conf_file}" permissions="0644"/>
        <propertiesFileSet>
            <file>${sys_conf_file}</file>
            <key>NAME</key>
            <value>sdbcm</value>
        </propertiesFileSet>
        <propertiesFileSet>
            <file>${sys_conf_file}</file>
            <key>SDBADMIN_USER</key>
            <value>${username}</value>
        </propertiesFileSet>
        <propertiesFileSet>
            <file>${sys_conf_file}</file>
            <key>INSTALL_DIR</key>
            <value>${installdir}</value>
        </propertiesFileSet>
        <setInstallerVariable name="md5sum" value="0000"/>
        <setInstallerVariableFromScriptOutput>
            <exec>md5sum</exec>
            <execArgs>"${installer_pathname}" | cut -c 1-32 </execArgs>
            <name>md5sum</name>
        </setInstallerVariableFromScriptOutput>
        <propertiesFileSet>
            <file>${sys_conf_file}</file>
            <key>MD5</key>
            <value>${md5sum}</value>
        </propertiesFileSet>

        <!--write conf/sdbcm.conf-->
        <propertiesFileSet>
            <file>${installdir}/conf/sdbcm.conf</file>
            <key>defaultPort</key>
            <value>${port}</value>
        </propertiesFileSet>
        <propertiesFileSet>
            <file>${installdir}/conf/sdbcm.conf</file>
            <key>AutoStart</key>
            <value>false</value>
            <ruleList>
                <isTrue>
                    <negate>1</negate>
                    <value>${processAutoStart}</value>
                </isTrue>
            </ruleList>
        </propertiesFileSet>
        <propertiesFileSet>
            <file>${installdir}/conf/sdbcm.conf</file>
            <key>IsGeneral</key>
            <value>${IsGeneral}</value>
            <ruleList>
               <isTrue value="${has_om}"/>
            </ruleList>
        </propertiesFileSet>
        <propertiesFileSet>
            <file>${installdir}/conf/sdbcm.conf</file>
            <key>OMAddress</key>
            <value>${OMAddress}</value>
            <ruleList>
               <isTrue value="${has_om}"/>
            </ruleList>
        </propertiesFileSet>
        <!-- 
            set environment variable, rule:
            add env to ~/.bashrc       whether it exists or not
            add env to ~/.bash_profile if it exists
            add env to ~/.profile      if it exists
            add env to ~/.bash_profile if neither .bash_profile nor profile exists
        -->
        <touchFile path="~${username}/.bashrc"/>
        <runProgram>
            <program>chown</program><!--<changeOwnerAndGroup> isnt effective for hidden files-->
            <programArguments>-R ${username}:${groupname} ~${username}/.bashrc</programArguments>
            <ruleList>
                <fileExists path="~${username}/.bashrc"/>
            </ruleList>
        </runProgram>
        <touchFile path="~${username}/.bash_profile">
            <ruleEvaluationLogic>and</ruleEvaluationLogic>
            <ruleList>
                <fileExists path="~${username}/.bash_profile" negate="1"/>
                <fileExists path="~${username}/.profile" negate="1"/>
            </ruleList>
        </touchFile>
        <runProgram>
            <program>chown</program><!--<changeOwnerAndGroup> isnt effective for hidden files-->
            <programArguments>-R ${username}:${groupname} ~${username}/.bash_profile</programArguments>
            <ruleList>
                <fileExists path="~${username}/.bash_profile"/>
            </ruleList>
        </runProgram>
        
        <addEnv envFile="~${username}/.bashrc"/>
        <addEnv envFile="~${username}/.bash_profile">
            <ruleList>
                <fileExists path="~${username}/.bash_profile"/>
            </ruleList>
        </addEnv>
        <addEnv envFile="~${username}/.profile">
            <ruleList>
                <fileExists path="~${username}/.profile"/>
            </ruleList>
        </addEnv>

        <!--you should place 'start service' and 'create om' in last of <postInstallationActionList>-->
        <!--because if this step failed, <postInstallationActionList> will abort and next steps will not be excuted-->
        <!--add and start service-->
        <getSysType type="sys_type"/>
        <if>
            <conditionRuleList>
                <compareValues value1="${sys_type}" logic="equals" value2="systemd"/>
            </conditionRuleList>
            <actionList>
                <addSystemdService/>
            </actionList>
            <elseActionList>
                <addDefaultService/>
            </elseActionList>
        </if>
        <setInstallerVariable name="add_service_done" value="true">
             <ruleList>
                 <compareText logic="equals" text="${program_exit_code}" value="0"/>
             </ruleList>
        </setInstallerVariable>
        <if>
            <conditionRuleList>
                <compareText logic="equals" text="${SMS}" value="only"/>
                <compareText logic="equals" text="${installmode}" value="cover"/>
            </conditionRuleList>
            <actionList>
               <runProgram>
                   <program>${installdir}/bin/sdbcmart</program>
                   <programArguments></programArguments>
                   <abortOnError>0</abortOnError>
                   <showMessageOnError>0</showMessageOnError>
               </runProgram>
            </actionList>
            <elseActionList>
                <startServiceFunction/>
            </elseActionList>
        </if>

        <setInstallerVariable name="install_om_mode" value="normal"/>
        <setInstallerVariable>
            <name>install_om_mode</name>
            <value>upgrade</value>
            <ruleList>
                <isTrue value="${has_om}"/>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="need_install_om" value="true"/>
        <setInstallerVariable>
            <name>need_install_om</name>
            <value>false</value>
            <ruleList>
                <isFalse value="${has_om}"/>
                <compareText logic="equals" text="${SMS}" value="false"/>
            </ruleList>
        </setInstallerVariable>
        
        <!--start om-->
        <setInstallerVariable name="om_port"    value="11780"/>
        <setInstallerVariable name="om_dbpath"  value="${installdir}/database/sms/${om_port}"/>
        <setInstallerVariable name="http_port"  value="8000"/>

        <runProgram>
            <program>${installdir}/install_om.sh</program>
            <programArguments>${install_om_mode} "${installdir}" "${installer_pathname}" ${port} ${om_port} "${om_dbpath}" ${http_port}</programArguments>
            <ruleList>
                <compareText logic="equals" text="${install_om_mode}" value="normal"/>
                <isTrue value="${need_install_om}"/>
            </ruleList>
            <onErrorActionList>
                <consoleWrite text="&#xA;error message:&#xA;${program_stdout}&#xA;"/>
            </onErrorActionList>
        </runProgram>
        <runProgram>
            <program>${installdir}/install_om.sh</program>
            <programArguments>${install_om_mode} "${installdir}" "${installer_pathname}"</programArguments>
            <ruleList>
                <compareText logic="equals" text="${install_om_mode}" value="upgrade"/>
                <isTrue value="${need_install_om}"/>
            </ruleList>
            <onErrorActionList>
                <consoleWrite text="&#xA;error message:&#xA;${program_stdout}&#xA;"/>
            </onErrorActionList>
        </runProgram>
        
        <changeOwnerAndGroup>
            <files>${installdir}/packet;${installdir}/packet/${installerFilename}</files>
            <group>${groupname}</group>
            <owner>${username}</owner>
        </changeOwnerAndGroup>
        <deleteFile path="${installdir}/sdbbp.log"/>

    </postInstallationActionList>

    <installationAbortedActionList>
        <actionGroup>
            <actionList>
                <delSystemdService>
                    <ruleEvaluationLogic>and</ruleEvaluationLogic>
                    <ruleList>
                        <compareValues value1="${sys_type}" logic="equals" value2="systemd"/>
                        <isTrue value="${add_service_done}"/>
                    </ruleList>
                </delSystemdService>
                <delDefaultService>
                    <ruleEvaluationLogic>and</ruleEvaluationLogic>
                    <ruleList>
                        <compareValues value1="${sys_type}" logic="does_not_equal" value2="systemd"/>
                        <isTrue value="${add_service_done}"/>
                    </ruleList>
                </delDefaultService>
                <deleteFile>
                    <abortOnError>0</abortOnError>
                    <path>${sys_conf_file}</path>
                    <ruleList>
                        <isTrue value="${add_sysconf_done}"/>
                    </ruleList>
                </deleteFile>
                <runProgram>
                    <customErrorMessage>${msg(Install.ErrorMsg.DeleteUser.error)}</customErrorMessage>
                    <program>userdel</program>
                    <programArguments>${username}</programArguments>
                    <ruleList>
                        <isTrue value="${add_user_done}"/>
                    </ruleList>
                </runProgram>
                <deleteGroup>
                    <groupname>${groupname}</groupname>
                    <ruleList>
                        <isTrue value="${add_group_done}"/>
                    </ruleList>
                </deleteGroup>
            </actionList>
            <ruleList>
                <compareText logic="equals" text="${stage}" value="normal"/>
            </ruleList>
        </actionGroup>

    </installationAbortedActionList>

</component>
